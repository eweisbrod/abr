[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applied Business Research",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a work in process website for a potential book on applied business research in R. The goal of the website is to provide tools and examples for reproducible and well-formatted research reports.\nThis is an example of a Quarto citation Knuth (1984) in a sentence.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "project-setup.html",
    "href": "project-setup.html",
    "title": "2  Project Setup",
    "section": "",
    "text": "2.1 Git vs. GitHub\nGit is the underlying code that helps manage version control of your projects. You can find more information about the details of Git here. Information about how to install git on your machine can be found here.\nGitHub is a web-based user interface that makes Git easier to work with by allowing “point-and-click” version control rather than typing git commands. You will want to set up a GitHub account. The rest of this chapter will reference the use of GitHub, although everything discussed can also be accomplished through the Git language.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Setup</span>"
    ]
  },
  {
    "objectID": "project-setup.html#language-of-github",
    "href": "project-setup.html#language-of-github",
    "title": "2  Project Setup",
    "section": "2.2 Language of GitHub",
    "text": "2.2 Language of GitHub\nIt is important to remember that GitHub acts as a version control interface for your research projects. So, while we will discuss the verbiage of GitHub, at its core, all that it is doing is keeping track of the changes that you make to your code. It may be helpful to translate the Git language into words you regularly associate with project management.\nRepository - A repository is where all the code for a specific project lives. You can think of it like the project folder where your code is stored. The benefit of a repository is that it is stored online, allowing you to easily access it from any machine. You will most likely want to make your repository private, so that only you and people you identify as co-authors can access your code.\nFork - “Forking” a repository is equivalent to making a copy of someone else’s repository. If a repository is made public, then anyone can fork the repository to have their own copy. This is unlikely to be something that will commonly occur in your own research, as we will discuss next. You can think of forking a repository as the same as copying someone else’s code folder and pasting it onto your computer.\nClone - “Cloning” is where the power of GitHub really begins. Cloning a repository is the same as giving your local machine (e.g., computer) access to the code in the repository. Think of it like installing Dropbox on another computer. Now you have access to all the files stored on Dropbox. Cloning a repository is the exact same thing for code. Once you have cloned the repository, you can now work on the code from that machine. The power comes in by being able to clone the repository on multiple computers, and your coauthors doing the same, allowing you all to work on the same set of code. To clone a repository, you will need the cloning URL. To get this, go to the repository on GitHub, click the green “Code” button, and click on the copy button (two intersecting squares) next to the HTTPS URL.\nStaging - Once you save the code you are working on to your local computer, a new row will appear under the “Git” tab in the top right panel of R Studio. In order to officially “save” your changes to your online GitHub repository, you need to first stage the changes. “Staging” is the same thing as “selecting” which changes you want to officially send to GitHub, which will be discussed next.\nCommit - Once you have staged your changes, you are ready to begin the process of uploading them to GitHub. The first thing you need to do is to “commit” the changes. As the name implies, a “commit” means you are committed ;) to making the changes to the code. To do this, click the “Commit” button in the top right panel of R Studio. You will need to type a short message which summarizes the changes that you have made, which will be visible on GitHub so you can easily see the evolution of your code over time. Once you have typed your message, click “Commit”.\nPull - “Pulling” is effectively the same as downloading the most recent version of your project’s code onto your local computer. When you click “Pull” in the top right panel of R Studio, you are “pulling” the code from GitHub onto your local machine. You should always pull before you push!\nPush - “Pushing” is the final step of saving your code through GitHub. After you have committed your changes and pulled the most recent version of the project to your machine, you can send your changes to GitHub by clicking “Push” in the top right panel of R Studio. Doing this officially sends the changes that you have made up to GitHub, effectively pushing the code from your local device onto GitHub. This can also be thought of as if you made changes to a file on your local computer and then saved that file onto Dropbox. The power of GitHub is that you can see both the old version and new version, and restore your code to older versions if you decide you don’t like your changes.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Setup</span>"
    ]
  },
  {
    "objectID": "project-setup.html#power-of-projects",
    "href": "project-setup.html#power-of-projects",
    "title": "2  Project Setup",
    "section": "2.3 Power of Projects",
    "text": "2.3 Power of Projects\nWhen you first begin working with R, one of the first things that you learn are the benefits of storing/saving code in R scripts. In theory, we could always write all of our code in the terminal, and just rewrite it every time we wanted to run a command (gross!). Using R scripts allows us to save our code, which can be run the exact same way every time. In a nutshell, what the R script is really doing is making our code more reproducible, as we can be sure that we are always running the same commands.\nThe next evolution of your R journey probably went something like this… You realized that trying to code up an entire research project in one R script was burdensome. There are thousands of lines of code, some of which you do not want to run every time. So, you break up your project into multiple R scripts, with each one serving a different function (e.g., data download, data cleaning, analysis, figures, etc.). While this likely initially occurred just by saving the different scripts in the Dropbox folder where you stored your project files (code, data, paper drafts, etc.), we will next discuss how we can integrate GitHub to help make working on a research project easier.\nProjects in R can be thought of as self-contained folders, where all your code and associated documents can live. The power of these projects is that they can be integrated with GitHub, making your work more reproducible by keeping all your code for a project in one place along with the version history.1 To start a new project, you will first create a repository on GitHub with this project’s name. You then go into R Studio and click “File -&gt; New Project”. From there, you will click on “Version Control -&gt; Git”. This brings you to a screen which will allow you to clone (see above if this is unfamiliar) your GitHub repository to your local machine. You will copy and paste the URL from the repository into the “Repository URL” text box. The “Project directory name:” box will populate with a location on your local computer. This is where the project and subsequent R scripts will live. How you manage these comes down to personal preference, but a common way to store GitHub projects locally is to create a “git” folder on your computer’s C-drive and then store each project in the git folder. Once you have set the project directory, you can select “Create Project” to create the local version of the repository on your computer.\nThe key thing to notice (and one of the many powers of working within projects) is located near the top right corner of R Studio. You will now see a blue box with the letter “R” inside of it, which is the image of an R project. Next to this, you will see the name of the project you just created, indicating that you are working “inside” this project. When you look at the “Files” in the bottom right panel, you will see that the directory has been changed to the location of your R project. This allows you to see all the scripts associated with this project, and quickly change between scripts. Importantly, any pushes that you make to GitHub will be pushed to that specific project.\nOne of the nice features of working in projects is the ability to quickly access your project code and switch between projects. For example, if you were conducting a research project using just R scripts, you would need to save them somewhere (e.g., Dropbox) and navigate to that folder to open/access them. When using an R project, rather than navigating to the folder on your computer that contains your code, you can just open R Studio and click on the R project button in the top right corner (blue cube with “R” inside). This will open up a drop down menu of all the projects you have on your computer, allowing you to open the one you want. When you close the project, whatever R scripts that you have open at the time you close will automatically open again the next time you open the project.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Setup</span>"
    ]
  },
  {
    "objectID": "project-setup.html#reproducible-workflow",
    "href": "project-setup.html#reproducible-workflow",
    "title": "2  Project Setup",
    "section": "2.4 Reproducible Workflow",
    "text": "2.4 Reproducible Workflow\nAll of the things we have discussed up to this point have been about making our code and research projects more reproducible and easier to understand. Beyond these tools, it is important to remember that a truly reproducible research project means that someone can take your project and with limited/no prior knowledge about what you were doing, replicate your findings and understand your code. To make this possible, it is important to try and make your code as clear and concise as possible, including plenty of documentation and comments in the code explaining what is happening. One of the best ways that I have found to keep my workflow easy to track is through developing a consistent naming convention between R scripts and data files.\nWhen creating my R scripts, I always begin the script name with a number, beginning with “00”. This is then followed by “-short-description.R” where the “short-description” is a short description of what the code is doing. The scripts are numbered based on when in the sequence they should be run. So, you would run the “00” scripts first, then “01”, “02”, and so on. Importantly, any data that I save from a script is named beginning with that script’s numeric identifier. For example, if I save a data set called “new_data.parquet” from an R script titled “02-create-new-data.R”, then I would save the parquet file with the name “02_new_data.parquet” in my Dropbox data folder. Doing this helps along two dimensions. First, it makes your data folder much more organized, with the data ordered in the chronological order that it was generated by your code. Second (and most importantly) it makes it immediately obvious which script generated the data set. That way, if someone has questions about a particular data set, you can immediately know what R script generated the data.\nBelow is an example project setup with the naming convention. The first level of bullet points are the R scripts (which would be located in the git folder) and the second level are the data sets (which would be saved on Dropbox).\n\n00-Global-Parameters.R\n01-Download-WRDS-Data.R\n\n01_compustat_data_raw.parquet\n\n02-Create-Master-Data.R\n\n02_master_data.parquet\n\n03-Main-Analyses.R\n\n03.01_table_1.tex\n03.02_table_2.tex\n\n04-Figures.R\n\n04.01_figure_1.jpeg\n04.02_figure_2.jpeg",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Setup</span>"
    ]
  },
  {
    "objectID": "project-setup.html#footnotes",
    "href": "project-setup.html#footnotes",
    "title": "2  Project Setup",
    "section": "",
    "text": "Projects and repositories are linked together. A project lives in R and is an R object, while a repository lives on GitHub. When you read “repository” think “project” or vice versa, however you prefer.↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Project Setup</span>"
    ]
  },
  {
    "objectID": "global-params-packs-util.html",
    "href": "global-params-packs-util.html",
    "title": "3  Installing Packages, Setting Global Parameters, and Creating Necessary Functions",
    "section": "",
    "text": "3.1 Install Necessary Packages\nThis script uses an R package called ‘pacman’ to check if the other packages used in this example are installed on your machine. If not, it installs them.\nThis line checks for the ‘pacman’ package, and installs it if needed.\nif (!require(\"pacman\")) install.packages(\"pacman\")\n\nLoading required package: pacman\nThis line uses ‘pacman’ to install all of the other packages in the project. Not all of the packages are crucial but we can put them all here anyways for future use.You may see a lot of warnings as the packages install but that is ok.\npacman::p_load(tidyverse, \n                dbplyr,\n                RPostgres,\n                DBI,\n                glue,\n                arrow,\n                haven,\n                tictoc, \n                lubridate,\n                modelsummary,\n                kableExtra,\n                formattable,\n                fixest,\n                flextable,\n                officer,\n                corrplot,\n                equatags,\n                broom,\n                usethis,\n                scales,\n                forcats\n               )",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installing Packages, Setting Global Parameters, and Creating Necessary Functions</span>"
    ]
  },
  {
    "objectID": "global-params-packs-util.html#install-necessary-packages",
    "href": "global-params-packs-util.html#install-necessary-packages",
    "title": "3  Installing Packages, Setting Global Parameters, and Creating Necessary Functions",
    "section": "",
    "text": "3.1.1 Log into wrds to check\nWe will try to log into WRDS site here using Postgres. Just in case, check to make sure there is not already a connection open.\n\nif(exists(\"wrds\")){\n  dbDisconnect(wrds)  \n}\n\nNow log on by uncommenting the below code, it will prompt for your WRDS username and password. You can use the ‘Keyring’ in the prompt to save the username and password securely.\n\n#keyring::key_set(\"WRDS_user\")\n#keyring::key_set(\"WRDS_pw\")\n\n#wrds &lt;- dbConnect(Postgres(),\n#                  host = 'wrds-pgdata.wharton.upenn.edu', \n#                  port = 9737,              \n#                  user = keyring::key_get(\"WRDS_USER\"),        \n#                  password = keyring::key_get(\"WRDS_PW\"),    \n#                  sslmode = 'require',                 \n#                  dbname = 'wrds')\n\nRun the below line. If you are connected you should see something like the below output in your console:\n\n#&lt;PqConnection&gt;wrds@wrds-pgdata.wharton.upenn.edu:9737\n\nIf the above two commands time out, you may be stuck behind a firewall etc. Remember to close the connection after testing\n\nif(exists(\"wrds\")){\n  dbDisconnect(wrds)  \n}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installing Packages, Setting Global Parameters, and Creating Necessary Functions</span>"
    ]
  },
  {
    "objectID": "global-params-packs-util.html#define-global-parameters",
    "href": "global-params-packs-util.html#define-global-parameters",
    "title": "3  Installing Packages, Setting Global Parameters, and Creating Necessary Functions",
    "section": "3.2 Define Global Parameters",
    "text": "3.2 Define Global Parameters\nIn this section, we will first setup a data folder path and create a project specific-parameter.\n\n3.2.1 Setup the Data Folder Path\nA useful trick for sharing codes with coauthors is to store the path to your local data folder in your project-level R environment file (.Renviron).\nStep 1: Uncomment and run the below line to edit your .Renviron file.\n\n#usethis::edit_r_environ('project')\n\nStep 2: Uncomment and paste the below line into the .Renviron file. The .Renviron file should be open in a separate tab in Rstudio if you ran the above line correctly.\n\n#DATA_PATH = 'E:/acct_995_data/abr'\n\nReplace the quoted directory name in the example with the path to whatever folder you would like to store your data in. Notice the slashes might go the other way from Windows.\nIt is recommended to not store your data in the Git project folder. Github is designed for hosting code, not data. We can use a separate folder, usually in Dropbox if there is enough space on Dropbox.\nStep 3: Comment out the code you ran to set up your Renviron and then restart R. You should only have to do these steps once any time you start a new project or download a project to a new computer.\nThe below line loads the data path from the project environment. The benefit of this is that you now only need one version of the code no matter which coauthor is running the code. The same code should work for all coauthors or work the same way whether you are on your laptop or desktop, etc. Essentially, anyone working on the same project can access the data without manually setting the data path each time.\n\ndata_path&lt;- Sys.getenv('DATA_PATH')\n\nIf the above process is too complicated and you don’t have coauthors you can just set data_path manually by deleting everything above and uncommenting the below:\n\n#data_path&lt;- \"E:/acct_995_data/abr\"\n\nYou would then replace “E:/acct_995_data/abr” with your own data path.\n\n\n3.2.2 Setup any project-specific parameters\nFor example, you might want to define sample years here and then you can refer to them throughout the code as needed, there are many use-cases.\nExample parameters: beg_year and end_year to define the sample period:\n\nbeg_year &lt;- 1970\n\nthe assignment arrow is an R grammar style, but equal signs work too.\n\nend_year = 2022",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installing Packages, Setting Global Parameters, and Creating Necessary Functions</span>"
    ]
  },
  {
    "objectID": "global-params-packs-util.html#utilities",
    "href": "global-params-packs-util.html#utilities",
    "title": "3  Installing Packages, Setting Global Parameters, and Creating Necessary Functions",
    "section": "3.3 Utilities",
    "text": "3.3 Utilities\nIn this section, we will create some useful utility functions that we can later use throughout the project repeatedly.\n\n3.3.1 R Options\nThe below line will get rid of scientific notation which is unnecessary sometimes.\n\noptions(scipen=999)\n\nThis will print blanks for NAs in Kable documents.\n\noptions(knitr.kable.NA = '')\nmessage(\"set R formatting options\") #Check whether the R formatting options are applied.\n\nset R formatting options\n\n\n\n\n3.3.2 Parquet functions\nThis allows for use of reading and writing parquet files without library(arrow). This also sets default compression method for writing.\n\nread_parquet &lt;- arrow::read_parquet\nwrite_parquet &lt;- function(x, p) {\n  arrow::write_parquet(x, p, compression = \"gzip\", compression_level = 5)\n}\nmessage(\"imported parquet functions\") #Check whether the parquet function is defined \n\nimported parquet functions\n\n\n\n\n3.3.3 Industry functions\nThis section will use Fama-French industry classification to assign names and numbers to various industries. We will use the 12 and 49 industry classifications.\nAssign FF12 industry name, given sic code.\n\nassign_FF12 &lt;- function(sic) {\n  dplyr::case_when(\n    sic &gt;= 0100 & sic &lt;= 0999 ~ \"Consumer Nondurables\",\n    sic &gt;= 2000 & sic &lt;= 2399 ~ \"Consumer Nondurables\",\n    sic &gt;= 2700 & sic &lt;= 2749 ~ \"Consumer Nondurables\",\n    sic &gt;= 2770 & sic &lt;= 2799 ~ \"Consumer Nondurables\",\n    sic &gt;= 3100 & sic &lt;= 3199 ~ \"Consumer Nondurables\",\n    sic &gt;= 3940 & sic &lt;= 3989 ~ \"Consumer Nondurables\",\n    \n    sic &gt;= 2500 & sic &lt;= 2519 ~ \"Consumer Durables\",\n    sic &gt;= 2590 & sic &lt;= 2599 ~ \"Consumer Durables\",\n    sic &gt;= 3630 & sic &lt;= 3659 ~ \"Consumer Durables\",\n    sic &gt;= 3710 & sic &lt;= 3711 ~ \"Consumer Durables\",\n    sic &gt;= 3714 & sic &lt;= 3714 ~ \"Consumer Durables\",\n    sic &gt;= 3716 & sic &lt;= 3716 ~ \"Consumer Durables\",\n    sic &gt;= 3750 & sic &lt;= 3751 ~ \"Consumer Durables\",\n    sic &gt;= 3792 & sic &lt;= 3792 ~ \"Consumer Durables\",\n    sic &gt;= 3900 & sic &lt;= 3939 ~ \"Consumer Durables\",\n    sic &gt;= 3990 & sic &lt;= 3999 ~ \"Consumer Durables\",\n    \n    sic &gt;= 2520 & sic &lt;= 2589 ~ \"Manufacturing\",\n    sic &gt;= 2600 & sic &lt;= 2699 ~ \"Manufacturing\",\n    sic &gt;= 2750 & sic &lt;= 2769 ~ \"Manufacturing\",\n    sic &gt;= 3000 & sic &lt;= 3099 ~ \"Manufacturing\",\n    sic &gt;= 3200 & sic &lt;= 3569 ~ \"Manufacturing\",\n    sic &gt;= 3580 & sic &lt;= 3629 ~ \"Manufacturing\",\n    sic &gt;= 3700 & sic &lt;= 3709 ~ \"Manufacturing\",\n    sic &gt;= 3712 & sic &lt;= 3713 ~ \"Manufacturing\",\n    sic &gt;= 3715 & sic &lt;= 3715 ~ \"Manufacturing\",\n    sic &gt;= 3717 & sic &lt;= 3749 ~ \"Manufacturing\",\n    sic &gt;= 3752 & sic &lt;= 3791 ~ \"Manufacturing\",\n    sic &gt;= 3793 & sic &lt;= 3799 ~ \"Manufacturing\",\n    sic &gt;= 3830 & sic &lt;= 3839 ~ \"Manufacturing\",\n    sic &gt;= 3860 & sic &lt;= 3899 ~ \"Manufacturing\",\n    \n    sic &gt;= 1200 & sic &lt;= 1399 ~ \"Energy\",\n    sic &gt;= 2900 & sic &lt;= 2999 ~ \"Energy\",\n    \n    sic &gt;= 2800 & sic &lt;= 2829 ~ \"Chemicals\",\n    sic &gt;= 2840 & sic &lt;= 2899 ~ \"Chemicals\",\n    \n    sic &gt;= 3570 & sic &lt;= 3579 ~ \"Business Equipment\",\n    sic &gt;= 3660 & sic &lt;= 3692 ~ \"Business Equipment\",\n    sic &gt;= 3694 & sic &lt;= 3699 ~ \"Business Equipment\",\n    sic &gt;= 3810 & sic &lt;= 3829 ~ \"Business Equipment\",\n    sic &gt;= 7370 & sic &lt;= 7379 ~ \"Business Equipment\",\n    \n    sic &gt;= 4800 & sic &lt;= 4899 ~ \"Telecommunications\",\n    \n    sic &gt;= 4900 & sic &lt;= 4949 ~ \"Utilities\",\n    \n    sic &gt;= 5000 & sic &lt;= 5999 ~ \"Retail\",\n    sic &gt;= 7200 & sic &lt;= 7299 ~ \"Retail\",\n    sic &gt;= 7600 & sic &lt;= 7699 ~ \"Retail\",\n    \n    sic &gt;= 2830 & sic &lt;= 2839 ~ \"Healthcare\",\n    sic &gt;= 3693 & sic &lt;= 3693 ~ \"Healthcare\",\n    sic &gt;= 3840 & sic &lt;= 3859 ~ \"Healthcare\",\n    sic &gt;= 8000 & sic &lt;= 8099 ~ \"Healthcare\",\n    \n    sic &gt;= 6000 & sic &lt;= 6999 ~ \"Finance\",\n    \n    TRUE ~ \"Other\"\n  )\n}\n\nAssign FF12 industry number, given sic code\n\nassign_FF12_num &lt;- function(sic) {\n  dplyr::case_when(\n    sic &gt;= 0100 & sic &lt;= 0999 ~ 1,\n    sic &gt;= 2000 & sic &lt;= 2399 ~ 1,\n    sic &gt;= 2700 & sic &lt;= 2749 ~ 1,\n    sic &gt;= 2770 & sic &lt;= 2799 ~ 1,\n    sic &gt;= 3100 & sic &lt;= 3199 ~ 1,\n    sic &gt;= 3940 & sic &lt;= 3989 ~ 1,\n    \n    sic &gt;= 2500 & sic &lt;= 2519 ~ 2,\n    sic &gt;= 2590 & sic &lt;= 2599 ~ 2,\n    sic &gt;= 3630 & sic &lt;= 3659 ~ 2,\n    sic &gt;= 3710 & sic &lt;= 3711 ~ 2,\n    sic &gt;= 3714 & sic &lt;= 3714 ~ 2,\n    sic &gt;= 3716 & sic &lt;= 3716 ~ 2,\n    sic &gt;= 3750 & sic &lt;= 3751 ~ 2,\n    sic &gt;= 3792 & sic &lt;= 3792 ~ 2,\n    sic &gt;= 3900 & sic &lt;= 3939 ~ 2,\n    sic &gt;= 3990 & sic &lt;= 3999 ~ 2,\n    \n    sic &gt;= 2520 & sic &lt;= 2589 ~ 3,\n    sic &gt;= 2600 & sic &lt;= 2699 ~ 3,\n    sic &gt;= 2750 & sic &lt;= 2769 ~ 3,\n    sic &gt;= 3000 & sic &lt;= 3099 ~ 3,\n    sic &gt;= 3200 & sic &lt;= 3569 ~ 3,\n    sic &gt;= 3580 & sic &lt;= 3629 ~ 3,\n    sic &gt;= 3700 & sic &lt;= 3709 ~ 3,\n    sic &gt;= 3712 & sic &lt;= 3713 ~ 3,\n    sic &gt;= 3715 & sic &lt;= 3715 ~ 3,\n    sic &gt;= 3717 & sic &lt;= 3749 ~ 3,\n    sic &gt;= 3752 & sic &lt;= 3791 ~ 3,\n    sic &gt;= 3793 & sic &lt;= 3799 ~ 3,\n    sic &gt;= 3830 & sic &lt;= 3839 ~ 3,\n    sic &gt;= 3860 & sic &lt;= 3899 ~ 3,\n    \n    sic &gt;= 1200 & sic &lt;= 1399 ~ 4,\n    sic &gt;= 2900 & sic &lt;= 2999 ~ 4,\n    \n    sic &gt;= 2800 & sic &lt;= 2829 ~ 5,\n    sic &gt;= 2840 & sic &lt;= 2899 ~ 5,\n    \n    sic &gt;= 3570 & sic &lt;= 3579 ~ 6,\n    sic &gt;= 3660 & sic &lt;= 3692 ~ 6,\n    sic &gt;= 3694 & sic &lt;= 3699 ~ 6,\n    sic &gt;= 3810 & sic &lt;= 3829 ~ 6,\n    sic &gt;= 7370 & sic &lt;= 7379 ~ 6,\n    \n    sic &gt;= 4800 & sic &lt;= 4899 ~ 7,\n    \n    sic &gt;= 4900 & sic &lt;= 4949 ~ 8,\n    \n    sic &gt;= 5000 & sic &lt;= 5999 ~ 9,\n    sic &gt;= 7200 & sic &lt;= 7299 ~ 9,\n    sic &gt;= 7600 & sic &lt;= 7699 ~ 9,\n    \n    sic &gt;= 2830 & sic &lt;= 2839 ~ 10,\n    sic &gt;= 3693 & sic &lt;= 3693 ~ 10,\n    sic &gt;= 3840 & sic &lt;= 3859 ~ 10,\n    sic &gt;= 8000 & sic &lt;= 8099 ~ 10,\n    \n    sic &gt;= 6000 & sic &lt;= 6999 ~ 11,\n    \n    TRUE ~ 12\n  )\n}\n\nAssign FF49 industry name, given sic code. Note that FF49 is just FF48 plus “Other”\n\nassign_FF49 &lt;- function(sic) {\n  dplyr::case_when(\n    sic &gt;= 0100 & sic &lt;= 0199 ~ \"Agriculture\",\n    sic &gt;= 0200 & sic &lt;= 0299 ~ \"Agriculture\",\n    sic &gt;= 0700 & sic &lt;= 0799 ~ \"Agriculture\",\n    sic &gt;= 0910 & sic &lt;= 0919 ~ \"Agriculture\",\n    sic &gt;= 2048 & sic &lt;= 2048 ~ \"Agriculture\",\n    \n    sic &gt;= 2000 & sic &lt;= 2009 ~ \"Food Products\",\n    sic &gt;= 2010 & sic &lt;= 2019 ~ \"Food Products\",\n    sic &gt;= 2020 & sic &lt;= 2029 ~ \"Food Products\",\n    sic &gt;= 2030 & sic &lt;= 2039 ~ \"Food Products\",\n    sic &gt;= 2040 & sic &lt;= 2046 ~ \"Food Products\",\n    sic &gt;= 2050 & sic &lt;= 2059 ~ \"Food Products\",\n    sic &gt;= 2060 & sic &lt;= 2063 ~ \"Food Products\",\n    sic &gt;= 2070 & sic &lt;= 2079 ~ \"Food Products\",\n    sic &gt;= 2090 & sic &lt;= 2092 ~ \"Food Products\",\n    sic &gt;= 2095 & sic &lt;= 2095 ~ \"Food Products\",\n    sic &gt;= 2098 & sic &lt;= 2099 ~ \"Food Products\",\n    \n    (sic &gt;= 2064 & sic &lt;= 2068) | (sic &gt;= 2086 & sic &lt;= 2086) | (sic &gt;= 2087 & sic &lt;= 2087) | (sic &gt;= 2096 & sic &lt;= 2096) | (sic &gt;= 2097 & sic &lt;= 2097) ~ \"Candy & Soda\",\n    (sic &gt;= 2080 & sic &lt;= 2080) | (sic &gt;= 2082 & sic &lt;= 2082) | (sic &gt;= 2083 & sic &lt;= 2083) | (sic &gt;= 2084 & sic &lt;= 2084) | (sic &gt;= 2085 & sic &lt;= 2085) ~ \"Beer & Liquor\",\n    (sic &gt;= 2100 & sic &lt;= 2199) ~ \"Tobacco Products\",\n    (sic &gt;= 920 & sic &lt;= 999) | (sic &gt;= 3650 & sic &lt;= 3651) | (sic &gt;= 3652 & sic &lt;= 3652) | (sic &gt;= 3732 & sic &lt;= 3732) | (sic &gt;= 3930 & sic &lt;= 3931) | (sic &gt;= 3940 & sic &lt;= 3949) ~ \"Recreation\",\n    (sic &gt;= 7800 & sic &lt;= 7829) | (sic &gt;= 7830 & sic &lt;= 7833) | (sic &gt;= 7840 & sic &lt;= 7841) | (sic &gt;= 7900 & sic &lt;= 7900) | (sic &gt;= 7910 & sic &lt;= 7911) | (sic &gt;= 7920 & sic &lt;= 7929) | (sic &gt;= 7930 & sic &lt;= 7933) | (sic &gt;= 7940 & sic &lt;= 7949) | (sic &gt;= 7980 & sic &lt;= 7980) | (sic &gt;= 7990 & sic &lt;= 7999) ~ \"Entertainment\",\n    (sic &gt;= 2700 & sic &lt;= 2709) | (sic &gt;= 2710 & sic &lt;= 2719) | (sic &gt;= 2720 & sic &lt;= 2729) | (sic &gt;= 2730 & sic &lt;= 2739) | (sic &gt;= 2740 & sic &lt;= 2749) | (sic &gt;= 2770 & sic &lt;= 2771) | (sic &gt;= 2780 & sic &lt;= 2789) | (sic &gt;= 2790 & sic &lt;= 2799) ~ \"Printing and Publishing\",\n    (sic &gt;= 2047 & sic &lt;= 2047) | (sic &gt;= 2391 & sic &lt;= 2392) | (sic &gt;= 2510 & sic &lt;= 2519) | (sic &gt;= 2590 & sic &lt;= 2599) | (sic &gt;= 2840 & sic &lt;= 2843) | (sic &gt;= 2844 & sic &lt;= 2844) | (sic &gt;= 3160 & sic &lt;= 3161) | (sic &gt;= 3170 & sic &lt;= 3171) | (sic &gt;= 3172 & sic &lt;= 3172) | (sic &gt;= 3190 & sic &lt;= 3199) | (sic &gt;= 3229 & sic &lt;= 3229) | (sic &gt;= 3260 & sic &lt;= 3260) | (sic &gt;= 3262 & sic &lt;= 3263) | (sic &gt;= 3269 & sic &lt;= 3269) | (sic &gt;= 3230 & sic &lt;= 3231) | (sic &gt;= 3630 & sic &lt;= 3639) | (sic &gt;= 3750 & sic &lt;= 3751) | (sic &gt;= 3800 & sic &lt;= 3800) | (sic &gt;= 3860 & sic &lt;= 3861) | (sic &gt;= 3870 & sic &lt;= 3873) | (sic &gt;= 3910 & sic &lt;= 3911) | (sic &gt;= 3914 & sic &lt;= 3914) | (sic &gt;= 3915 & sic &lt;= 3915) | (sic &gt;= 3960 & sic &lt;= 3962) | (sic &gt;= 3991 & sic &lt;= 3991) | (sic &gt;= 3995 & sic &lt;= 3995) ~ \"Consumer Goods\",\n    (sic &gt;= 2300 & sic &lt;= 2390) | (sic &gt;= 3020 & sic &lt;= 3021) | (sic &gt;= 3100 & sic &lt;= 3111) | (sic &gt;= 3130 & sic &lt;= 3131) | (sic &gt;= 3140 & sic &lt;= 3149) | (sic &gt;= 3150 & sic &lt;= 3151) | (sic &gt;= 3963 & sic &lt;= 3965) ~ \"Apparel\",\n    (sic &gt;= 8000 & sic &lt;= 8099) ~ \"Healthcare\",\n    (sic &gt;= 3693 & sic &lt;= 3693) | (sic &gt;= 3840 & sic &lt;= 3849) | (sic &gt;= 3850 & sic &lt;= 3851) ~ \"Medical Equipment\",\n    (sic &gt;= 2830 & sic &lt;= 2830) | (sic &gt;= 2831 & sic &lt;= 2831) | (sic &gt;= 2833 & sic &lt;= 2833) | (sic &gt;= 2834 & sic &lt;= 2834) | (sic &gt;= 2835 & sic &lt;= 2835) | (sic &gt;= 2836 & sic &lt;= 2836) ~ \"Pharmaceutical Products\",\n    (sic &gt;= 2800 & sic &lt;= 2809) | (sic &gt;= 2810 & sic &lt;= 2819) | (sic &gt;= 2820 & sic &lt;= 2829) | (sic &gt;= 2850 & sic &lt;= 2859) | (sic &gt;= 2860 & sic &lt;= 2869) | (sic &gt;= 2870 & sic &lt;= 2879) | (sic &gt;= 2890 & sic &lt;= 2899) ~ \"Chemicals\",\n    (sic &gt;= 3031 & sic &lt;= 3031) | (sic &gt;= 3041 & sic &lt;= 3041) | (sic &gt;= 3050 & sic &lt;= 3053) | (sic &gt;= 3060 & sic &lt;= 3069) | (sic &gt;= 3070 & sic &lt;= 3079) | (sic &gt;= 3080 & sic &lt;= 3089) | (sic &gt;= 3090 & sic &lt;= 3099) ~ \"Rubber and Plastic Products\",\n    (sic &gt;= 2200 & sic &lt;= 2269) | (sic &gt;= 2270 & sic &lt;= 2279) | (sic &gt;= 2280 & sic &lt;= 2284) | (sic &gt;= 2290 & sic &lt;= 2295) | (sic &gt;= 2297 & sic &lt;= 2297) | (sic &gt;= 2298 & sic &lt;= 2298) | (sic &gt;= 2299 & sic &lt;= 2299) | (sic &gt;= 2393 & sic &lt;= 2395) | (sic &gt;= 2397 & sic &lt;= 2399) ~ \"Textiles\",\n    (sic &gt;= 800 & sic &lt;= 899) | (sic &gt;= 2400 & sic &lt;= 2439) | (sic &gt;= 2450 & sic &lt;= 2459) | (sic &gt;= 2490 & sic &lt;= 2499) | (sic &gt;= 2660 & sic &lt;= 2661) | (sic &gt;= 2950 & sic &lt;= 2952) | (sic &gt;= 3200 & sic &lt;= 3200) | (sic &gt;= 3210 & sic &lt;= 3211) | (sic &gt;= 3240 & sic &lt;= 3241) | (sic &gt;= 3250 & sic &lt;= 3259) | (sic &gt;= 3261 & sic &lt;= 3261) | (sic &gt;= 3264 & sic &lt;= 3264) | (sic &gt;= 3270 & sic &lt;= 3275) | (sic &gt;= 3280 & sic &lt;= 3281) | (sic &gt;= 3290 & sic &lt;= 3293) | (sic &gt;= 3295 & sic &lt;= 3299) | (sic &gt;= 3420 & sic &lt;= 3429) | (sic &gt;= 3430 & sic &lt;= 3433) | (sic &gt;= 3440 & sic &lt;= 3441) | (sic &gt;= 3442 & sic &lt;= 3442) | (sic &gt;= 3446 & sic &lt;= 3446) | (sic &gt;= 3448 & sic &lt;= 3448) | (sic &gt;= 3449 & sic &lt;= 3449) | (sic &gt;= 3450 & sic &lt;= 3451) | (sic &gt;= 3452 & sic &lt;= 3452) | (sic &gt;= 3490 & sic &lt;= 3499) | (sic &gt;= 3996 & sic &lt;= 3996) ~ \"Construction Materials\",\n    (sic &gt;= 1500 & sic &lt;= 1511) | (sic &gt;= 1520 & sic &lt;= 1529) | (sic &gt;= 1530 & sic &lt;= 1539) | (sic &gt;= 1540 & sic &lt;= 1549) | (sic &gt;= 1600 & sic &lt;= 1699) | (sic &gt;= 1700 & sic &lt;= 1799) ~ \"Construction\",\n    (sic &gt;= 3300 & sic &lt;= 3300) | (sic &gt;= 3310 & sic &lt;= 3317) | (sic &gt;= 3320 & sic &lt;= 3325) | (sic &gt;= 3330 & sic &lt;= 3339) | (sic &gt;= 3340 & sic &lt;= 3341) | (sic &gt;= 3350 & sic &lt;= 3357) | (sic &gt;= 3360 & sic &lt;= 3369) | (sic &gt;= 3370 & sic &lt;= 3379) | (sic &gt;= 3390 & sic &lt;= 3399) ~ \"Steel Works, etc.\",\n    (sic &gt;= 3400 & sic &lt;= 3400) | (sic &gt;= 3443 & sic &lt;= 3443) | (sic &gt;= 3444 & sic &lt;= 3444) | (sic &gt;= 3460 & sic &lt;= 3469) | (sic &gt;= 3470 & sic &lt;= 3479) ~ \"Fabricated Products\",\n    (sic &gt;= 3510 & sic &lt;= 3519) | (sic &gt;= 3520 & sic &lt;= 3529) | (sic &gt;= 3530 & sic &lt;= 3530) | (sic &gt;= 3531 & sic &lt;= 3531) | (sic &gt;= 3532 & sic &lt;= 3532) | (sic &gt;= 3533 & sic &lt;= 3533) | (sic &gt;= 3534 & sic &lt;= 3534) | (sic &gt;= 3535 & sic &lt;= 3535) | (sic &gt;= 3536 & sic &lt;= 3536) | (sic &gt;= 3538 & sic &lt;= 3538) | (sic &gt;= 3540 & sic &lt;= 3549) | (sic &gt;= 3550 & sic &lt;= 3559) | (sic &gt;= 3560 & sic &lt;= 3569) | (sic &gt;= 3580 & sic &lt;= 3580) | (sic &gt;= 3581 & sic &lt;= 3581) | (sic &gt;= 3582 & sic &lt;= 3582) | (sic &gt;= 3585 & sic &lt;= 3585) | (sic &gt;= 3586 & sic &lt;= 3586) | (sic &gt;= 3589 & sic &lt;= 3589) | (sic &gt;= 3590 & sic &lt;= 3599) ~ \"Machinery\",\n    (sic &gt;= 3600 & sic &lt;= 3600) | (sic &gt;= 3610 & sic &lt;= 3613) | (sic &gt;= 3620 & sic &lt;= 3621) | (sic &gt;= 3623 & sic &lt;= 3629) | (sic &gt;= 3640 & sic &lt;= 3644) | (sic &gt;= 3645 & sic &lt;= 3645) | (sic &gt;= 3646 & sic &lt;= 3646) | (sic &gt;= 3648 & sic &lt;= 3649) | (sic &gt;= 3660 & sic &lt;= 3660) | (sic &gt;= 3690 & sic &lt;= 3690) | (sic &gt;= 3691 & sic &lt;= 3692) | (sic &gt;= 3699 & sic &lt;= 3699) ~ \"Electrical Equipment\",\n    (sic &gt;= 2296 & sic &lt;= 2296) | (sic &gt;= 2396 & sic &lt;= 2396) | (sic &gt;= 3010 & sic &lt;= 3011) | (sic &gt;= 3537 & sic &lt;= 3537) | (sic &gt;= 3647 & sic &lt;= 3647) | (sic &gt;= 3694 & sic &lt;= 3694) | (sic &gt;= 3700 & sic &lt;= 3700) | (sic &gt;= 3710 & sic &lt;= 3710) | (sic &gt;= 3711 & sic &lt;= 3711) | (sic &gt;= 3713 & sic &lt;= 3713) | (sic &gt;= 3714 & sic &lt;= 3714) | (sic &gt;= 3715 & sic &lt;= 3715) | (sic &gt;= 3716 & sic &lt;= 3716) | (sic &gt;= 3792 & sic &lt;= 3792) | (sic &gt;= 3790 & sic &lt;= 3791) | (sic &gt;= 3799 & sic &lt;= 3799) ~ \"Automobiles and Trucks\",\n    (sic &gt;= 3720 & sic &lt;= 3720) | (sic &gt;= 3721 & sic &lt;= 3721) | (sic &gt;= 3723 & sic &lt;= 3724) | (sic &gt;= 3725 & sic &lt;= 3725) | (sic &gt;= 3728 & sic &lt;= 3729) ~ \"Aircraft\",\n    (sic &gt;= 3730 & sic &lt;= 3731) | (sic &gt;= 3740 & sic &lt;= 3743) ~ \"Shipbuilding, Railroad Equipment\",\n    (sic &gt;= 3760 & sic &lt;= 3769) | (sic &gt;= 3795 & sic &lt;= 3795) | (sic &gt;= 3480 & sic &lt;= 3489) ~ \"Defense\",\n    (sic &gt;= 1040 & sic &lt;= 1049) ~ \"Precious Metals\",\n    (sic &gt;= 1000 & sic &lt;= 1009) | (sic &gt;= 1010 & sic &lt;= 1019) | (sic &gt;= 1020 & sic &lt;= 1029) | (sic &gt;= 1030 & sic &lt;= 1039) | (sic &gt;= 1050 & sic &lt;= 1059) | (sic &gt;= 1060 & sic &lt;= 1069) | (sic &gt;= 1070 & sic &lt;= 1079) | (sic &gt;= 1080 & sic &lt;= 1089) | (sic &gt;= 1090 & sic &lt;= 1099) | (sic &gt;= 1100 & sic &lt;= 1119) | (sic &gt;= 1400 & sic &lt;= 1499) ~ \"Non-Metallic and Industrial Metal Mining\",\n    (sic &gt;= 1200 & sic &lt;= 1299) ~ \"Coal\",\n    (sic &gt;= 1300 & sic &lt;= 1300) | (sic &gt;= 1310 & sic &lt;= 1319) | (sic &gt;= 1320 & sic &lt;= 1329) | (sic &gt;= 1330 & sic &lt;= 1339) | (sic &gt;= 1370 & sic &lt;= 1379) | (sic &gt;= 1380 & sic &lt;= 1380) | (sic &gt;= 1381 & sic &lt;= 1381) | (sic &gt;= 1382 & sic &lt;= 1382) | (sic &gt;= 1389 & sic &lt;= 1389) | (sic &gt;= 2900 & sic &lt;= 2912) | (sic &gt;= 2990 & sic &lt;= 2999) ~ \"Petroleum and Natural Gas\",\n    (sic &gt;= 4900 & sic &lt;= 4900) | (sic &gt;= 4910 & sic &lt;= 4911) | (sic &gt;= 4920 & sic &lt;= 4922) | (sic &gt;= 4923 & sic &lt;= 4923) | (sic &gt;= 4924 & sic &lt;= 4925) | (sic &gt;= 4930 & sic &lt;= 4931) | (sic &gt;= 4932 & sic &lt;= 4932) | (sic &gt;= 4939 & sic &lt;= 4939) | (sic &gt;= 4940 & sic &lt;= 4942) ~ \"Utilities\",\n    (sic &gt;= 4800 & sic &lt;= 4800) | (sic &gt;= 4810 & sic &lt;= 4813) | (sic &gt;= 4820 & sic &lt;= 4822) | (sic &gt;= 4830 & sic &lt;= 4839) | (sic &gt;= 4840 & sic &lt;= 4841) | (sic &gt;= 4880 & sic &lt;= 4889) | (sic &gt;= 4890 & sic &lt;= 4890) | (sic &gt;= 4891 & sic &lt;= 4891) | (sic &gt;= 4892 & sic &lt;= 4892) | (sic &gt;= 4899 & sic &lt;= 4899) ~ \"Communication\",\n    (sic &gt;= 7020 & sic &lt;= 7021) | (sic &gt;= 7030 & sic &lt;= 7033) | (sic &gt;= 7200 & sic &lt;= 7200) | (sic &gt;= 7210 & sic &lt;= 7212) | (sic &gt;= 7214 & sic &lt;= 7214) | (sic &gt;= 7215 & sic &lt;= 7216) | (sic &gt;= 7217 & sic &lt;= 7217) | (sic &gt;= 7219 & sic &lt;= 7219) | (sic &gt;= 7220 & sic &lt;= 7221) | (sic &gt;= 7230 & sic &lt;= 7231) | (sic &gt;= 7240 & sic &lt;= 7241) | (sic &gt;= 7250 & sic &lt;= 7251) | (sic &gt;= 7260 & sic &lt;= 7269) | (sic &gt;= 7270 & sic &lt;= 7290) | (sic &gt;= 7291 & sic &lt;= 7291) | (sic &gt;= 7292 & sic &lt;= 7299) | (sic &gt;= 7395 & sic &lt;= 7395) | (sic &gt;= 7500 & sic &lt;= 7500) | (sic &gt;= 7520 & sic &lt;= 7529) | (sic &gt;= 7530 & sic &lt;= 7539) | (sic &gt;= 7540 & sic &lt;= 7549) | (sic &gt;= 7600 & sic &lt;= 7600) | (sic &gt;= 7620 & sic &lt;= 7620) | (sic &gt;= 7622 & sic &lt;= 7622) | (sic &gt;= 7623 & sic &lt;= 7623) | (sic &gt;= 7629 & sic &lt;= 7629) | (sic &gt;= 7630 & sic &lt;= 7631) | (sic &gt;= 7640 & sic &lt;= 7641) | (sic &gt;= 7690 & sic &lt;= 7699) | (sic &gt;= 8100 & sic &lt;= 8199) | (sic &gt;= 8200 & sic &lt;= 8299) | (sic &gt;= 8300 & sic &lt;= 8399) | (sic &gt;= 8400 & sic &lt;= 8499) | (sic &gt;= 8600 & sic &lt;= 8699) | (sic &gt;= 8800 & sic &lt;= 8899) | (sic &gt;= 7510 & sic &lt;= 7515) ~ \"Personal Services\",\n    (sic &gt;= 2750 & sic &lt;= 2759) | (sic &gt;= 3993 & sic &lt;= 3993) | (sic &gt;= 7218 & sic &lt;= 7218) | (sic &gt;= 7300 & sic &lt;= 7300) | (sic &gt;= 7310 & sic &lt;= 7319) | (sic &gt;= 7320 & sic &lt;= 7329) | (sic &gt;= 7330 & sic &lt;= 7339) | (sic &gt;= 7340 & sic &lt;= 7342) | (sic &gt;= 7349 & sic &lt;= 7349) | (sic &gt;= 7350 & sic &lt;= 7351) | (sic &gt;= 7352 & sic &lt;= 7352) | (sic &gt;= 7353 & sic &lt;= 7353) | (sic &gt;= 7359 & sic &lt;= 7359) | (sic &gt;= 7360 & sic &lt;= 7369) | (sic &gt;= 7374 & sic &lt;= 7374) | (sic &gt;= 7376 & sic &lt;= 7376) | (sic &gt;= 7377 & sic &lt;= 7377) | (sic &gt;= 7378 & sic &lt;= 7378) | (sic &gt;= 7379 & sic &lt;= 7379) | (sic &gt;= 7380 & sic &lt;= 7380) | (sic &gt;= 7381 & sic &lt;= 7382) | (sic &gt;= 7383 & sic &lt;= 7383) | (sic &gt;= 7384 & sic &lt;= 7384) | (sic &gt;= 7385 & sic &lt;= 7385) | (sic &gt;= 7389 & sic &lt;= 7390) | (sic &gt;= 7391 & sic &lt;= 7391) | (sic &gt;= 7392 & sic &lt;= 7392) | (sic &gt;= 7393 & sic &lt;= 7393) | (sic &gt;= 7394 & sic &lt;= 7394) | (sic &gt;= 7396 & sic &lt;= 7396) | (sic &gt;= 7397 & sic &lt;= 7397) | (sic &gt;= 7399 & sic &lt;= 7399) | (sic &gt;= 7519 & sic &lt;= 7519) | (sic &gt;= 8700 & sic &lt;= 8700) | (sic &gt;= 8710 & sic &lt;= 8713) | (sic &gt;= 8720 & sic &lt;= 8721) | (sic &gt;= 8730 & sic &lt;= 8734) | (sic &gt;= 8740 & sic &lt;= 8748) | (sic &gt;= 8900 & sic &lt;= 8910) | (sic &gt;= 8911 & sic &lt;= 8911) | (sic &gt;= 8920 & sic &lt;= 8999) | (sic &gt;= 4220 & sic &lt;= 4229) ~ \"Business Services\",\n    (sic &gt;= 3570 & sic &lt;= 3579) | (sic &gt;= 3680 & sic &lt;= 3680) | (sic &gt;= 3681 & sic &lt;= 3681) | (sic &gt;= 3682 & sic &lt;= 3682) | (sic &gt;= 3683 & sic &lt;= 3683) | (sic &gt;= 3684 & sic &lt;= 3684) | (sic &gt;= 3685 & sic &lt;= 3685) | (sic &gt;= 3686 & sic &lt;= 3686) | (sic &gt;= 3687 & sic &lt;= 3687) | (sic &gt;= 3688 & sic &lt;= 3688) | (sic &gt;= 3689 & sic &lt;= 3689) | (sic &gt;= 3695 & sic &lt;= 3695) ~ \"Computer Hardware\",\n    (sic &gt;= 7370 & sic &lt;= 7372) | (sic &gt;= 7375 & sic &lt;= 7375) | (sic &gt;= 7373 & sic &lt;= 7373) ~ \"Computer Software\",\n    (sic &gt;= 3622 & sic &lt;= 3622) | (sic &gt;= 3661 & sic &lt;= 3661) | (sic &gt;= 3662 & sic &lt;= 3662) | (sic &gt;= 3663 & sic &lt;= 3663) | (sic &gt;= 3664 & sic &lt;= 3664) | (sic &gt;= 3665 & sic &lt;= 3665) | (sic &gt;= 3666 & sic &lt;= 3666) | (sic &gt;= 3669 & sic &lt;= 3669) | (sic &gt;= 3670 & sic &lt;= 3679) | (sic &gt;= 3810 & sic &lt;= 3810) | (sic &gt;= 3812 & sic &lt;= 3812) ~ \"Electronic Equipment\",\n    (sic &gt;= 3811 & sic &lt;= 3811) | (sic &gt;= 3820 & sic &lt;= 3820) | (sic &gt;= 3821 & sic &lt;= 3821) | (sic &gt;= 3822 & sic &lt;= 3822) | (sic &gt;= 3823 & sic &lt;= 3823) | (sic &gt;= 3824 & sic &lt;= 3824) | (sic &gt;= 3825 & sic &lt;= 3825) | (sic &gt;= 3826 & sic &lt;= 3826) | (sic &gt;= 3827 & sic &lt;= 3827) | (sic &gt;= 3829 & sic &lt;= 3829) | (sic &gt;= 3830 & sic &lt;= 3839) ~ \"Measuring and Control Equipment\",\n    (sic &gt;= 2520 & sic &lt;= 2549) | (sic &gt;= 2600 & sic &lt;= 2639) | (sic &gt;= 2670 & sic &lt;= 2699) | (sic &gt;= 2760 & sic &lt;= 2761) | (sic &gt;= 3950 & sic &lt;= 3955) ~ \"Business Supplies\",\n    (sic &gt;= 2440 & sic &lt;= 2449) | (sic &gt;= 2640 & sic &lt;= 2659) | (sic &gt;= 3220 & sic &lt;= 3221) | (sic &gt;= 3410 & sic &lt;= 3412) ~ \"Shipping Containers\",\n    (sic &gt;= 4000 & sic &lt;= 4013) | (sic &gt;= 4040 & sic &lt;= 4049) | (sic &gt;= 4100 & sic &lt;= 4100) | (sic &gt;= 4110 & sic &lt;= 4119) | (sic &gt;= 4120 & sic &lt;= 4121) | (sic &gt;= 4130 & sic &lt;= 4131) | (sic &gt;= 4140 & sic &lt;= 4142) | (sic &gt;= 4150 & sic &lt;= 4151) | (sic &gt;= 4170 & sic &lt;= 4173) | (sic &gt;= 4190 & sic &lt;= 4199) | (sic &gt;= 4200 & sic &lt;= 4200) | (sic &gt;= 4210 & sic &lt;= 4219) | (sic &gt;= 4230 & sic &lt;= 4231) | (sic &gt;= 4240 & sic &lt;= 4249) | (sic &gt;= 4400 & sic &lt;= 4499) | (sic &gt;= 4500 & sic &lt;= 4599) | (sic &gt;= 4600 & sic &lt;= 4699) | (sic &gt;= 4700 & sic &lt;= 4700) | (sic &gt;= 4710 & sic &lt;= 4712) | (sic &gt;= 4720 & sic &lt;= 4729) | (sic &gt;= 4730 & sic &lt;= 4739) | (sic &gt;= 4740 & sic &lt;= 4749) | (sic &gt;= 4780 & sic &lt;= 4780) | (sic &gt;= 4782 & sic &lt;= 4782) | (sic &gt;= 4783 & sic &lt;= 4783) | (sic &gt;= 4784 & sic &lt;= 4784) | (sic &gt;= 4785 & sic &lt;= 4785) | (sic &gt;= 4789 & sic &lt;= 4789) ~ \"Transportation\",\n    (sic &gt;= 5000 & sic &lt;= 5000) | (sic &gt;= 5010 & sic &lt;= 5015) | (sic &gt;= 5020 & sic &lt;= 5023) | (sic &gt;= 5030 & sic &lt;= 5039) | (sic &gt;= 5040 & sic &lt;= 5042) | (sic &gt;= 5043 & sic &lt;= 5043) | (sic &gt;= 5044 & sic &lt;= 5044) | (sic &gt;= 5045 & sic &lt;= 5045) | (sic &gt;= 5046 & sic &lt;= 5046) | (sic &gt;= 5047 & sic &lt;= 5047) | (sic &gt;= 5048 & sic &lt;= 5048) | (sic &gt;= 5049 & sic &lt;= 5049) | (sic &gt;= 5050 & sic &lt;= 5059) | (sic &gt;= 5060 & sic &lt;= 5060) | (sic &gt;= 5063 & sic &lt;= 5063) | (sic &gt;= 5064 & sic &lt;= 5064) | (sic &gt;= 5065 & sic &lt;= 5065) | (sic &gt;= 5070 & sic &lt;= 5078) | (sic &gt;= 5080 & sic &lt;= 5080) | (sic &gt;= 5081 & sic &lt;= 5081) | (sic &gt;= 5082 & sic &lt;= 5082) | (sic &gt;= 5083 & sic &lt;= 5083) | (sic &gt;= 5084 & sic &lt;= 5084) | (sic &gt;= 5085 & sic &lt;= 5085) | (sic &gt;= 5086 & sic &lt;= 5087) | (sic &gt;= 5088 & sic &lt;= 5088) | (sic &gt;= 5090 & sic &lt;= 5090) | (sic &gt;= 5091 & sic &lt;= 5092) | (sic &gt;= 5093 & sic &lt;= 5093) | (sic &gt;= 5094 & sic &lt;= 5094) | (sic &gt;= 5099 & sic &lt;= 5099) | (sic &gt;= 5100 & sic &lt;= 5100) | (sic &gt;= 5110 & sic &lt;= 5113) | (sic &gt;= 5120 & sic &lt;= 5122) | (sic &gt;= 5130 & sic &lt;= 5139) | (sic &gt;= 5140 & sic &lt;= 5149) | (sic &gt;= 5150 & sic &lt;= 5159) | (sic &gt;= 5160 & sic &lt;= 5169) | (sic &gt;= 5170 & sic &lt;= 5172) | (sic &gt;= 5180 & sic &lt;= 5182) | (sic &gt;= 5190 & sic &lt;= 5199) ~ \"Wholesale\",\n    (sic &gt;= 5200 & sic &lt;= 5200) | (sic &gt;= 5210 & sic &lt;= 5219) | (sic &gt;= 5220 & sic &lt;= 5229) | (sic &gt;= 5230 & sic &lt;= 5231) | (sic &gt;= 5250 & sic &lt;= 5251) | (sic &gt;= 5260 & sic &lt;= 5261) | (sic &gt;= 5270 & sic &lt;= 5271) | (sic &gt;= 5300 & sic &lt;= 5300) | (sic &gt;= 5310 & sic &lt;= 5311) | (sic &gt;= 5320 & sic &lt;= 5320) | (sic &gt;= 5330 & sic &lt;= 5331) | (sic &gt;= 5334 & sic &lt;= 5334) | (sic &gt;= 5340 & sic &lt;= 5349) | (sic &gt;= 5390 & sic &lt;= 5399) | (sic &gt;= 5400 & sic &lt;= 5400) | (sic &gt;= 5410 & sic &lt;= 5411) | (sic &gt;= 5412 & sic &lt;= 5412) | (sic &gt;= 5420 & sic &lt;= 5429) | (sic &gt;= 5430 & sic &lt;= 5439) | (sic &gt;= 5440 & sic &lt;= 5449) | (sic &gt;= 5450 & sic &lt;= 5459) | (sic &gt;= 5460 & sic &lt;= 5469) | (sic &gt;= 5490 & sic &lt;= 5499) | (sic &gt;= 5500 & sic &lt;= 5500) | (sic &gt;= 5510 & sic &lt;= 5529) | (sic &gt;= 5530 & sic &lt;= 5539) | (sic &gt;= 5540 & sic &lt;= 5549) | (sic &gt;= 5550 & sic &lt;= 5559) | (sic &gt;= 5560 & sic &lt;= 5569) | (sic &gt;= 5570 & sic &lt;= 5579) | (sic &gt;= 5590 & sic &lt;= 5599) | (sic &gt;= 5600 & sic &lt;= 5699) | (sic &gt;= 5700 & sic &lt;= 5700) | (sic &gt;= 5710 & sic &lt;= 5719) | (sic &gt;= 5720 & sic &lt;= 5722) | (sic &gt;= 5730 & sic &lt;= 5733) | (sic &gt;= 5734 & sic &lt;= 5734) | (sic &gt;= 5735 & sic &lt;= 5735) | (sic &gt;= 5736 & sic &lt;= 5736) | (sic &gt;= 5750 & sic &lt;= 5799) | (sic &gt;= 5900 & sic &lt;= 5900) | (sic &gt;= 5910 & sic &lt;= 5912) | (sic &gt;= 5920 & sic &lt;= 5929) | (sic &gt;= 5930 & sic &lt;= 5932) | (sic &gt;= 5940 & sic &lt;= 5940) | (sic &gt;= 5941 & sic &lt;= 5941) | (sic &gt;= 5942 & sic &lt;= 5942) | (sic &gt;= 5943 & sic &lt;= 5943) | (sic &gt;= 5944 & sic &lt;= 5944) | (sic &gt;= 5945 & sic &lt;= 5945) | (sic &gt;= 5946 & sic &lt;= 5946) | (sic &gt;= 5947 & sic &lt;= 5947) | (sic &gt;= 5948 & sic &lt;= 5948) | (sic &gt;= 5949 & sic &lt;= 5949) | (sic &gt;= 5950 & sic &lt;= 5959) | (sic &gt;= 5960 & sic &lt;= 5969) | (sic &gt;= 5970 & sic &lt;= 5979) | (sic &gt;= 5980 & sic &lt;= 5989) | (sic &gt;= 5990 & sic &lt;= 5990) | (sic &gt;= 5992 & sic &lt;= 5992) | (sic &gt;= 5993 & sic &lt;= 5993) | (sic &gt;= 5994 & sic &lt;= 5994) | (sic &gt;= 5995 & sic &lt;= 5995) | (sic &gt;= 5999 & sic &lt;= 5999) ~ \"Retail\",\n    (sic &gt;= 5800 & sic &lt;= 5819) | (sic &gt;= 5820 & sic &lt;= 5829) | (sic &gt;= 5890 & sic &lt;= 5899) | (sic &gt;= 7000 & sic &lt;= 7000) | (sic &gt;= 7010 & sic &lt;= 7019) | (sic &gt;= 7040 & sic &lt;= 7049) | (sic &gt;= 7213 & sic &lt;= 7213) ~ \"Restaraunts, Hotels, Motels\",\n    (sic &gt;= 6000 & sic &lt;= 6000) | (sic &gt;= 6010 & sic &lt;= 6019) | (sic &gt;= 6020 & sic &lt;= 6020) | (sic &gt;= 6021 & sic &lt;= 6021) | (sic &gt;= 6022 & sic &lt;= 6022) | (sic &gt;= 6023 & sic &lt;= 6024) | (sic &gt;= 6025 & sic &lt;= 6025) | (sic &gt;= 6026 & sic &lt;= 6026) | (sic &gt;= 6027 & sic &lt;= 6027) | (sic &gt;= 6028 & sic &lt;= 6029) | (sic &gt;= 6030 & sic &lt;= 6036) | (sic &gt;= 6040 & sic &lt;= 6059) | (sic &gt;= 6060 & sic &lt;= 6062) | (sic &gt;= 6080 & sic &lt;= 6082) | (sic &gt;= 6090 & sic &lt;= 6099) | (sic &gt;= 6100 & sic &lt;= 6100) | (sic &gt;= 6110 & sic &lt;= 6111) | (sic &gt;= 6112 & sic &lt;= 6113) | (sic &gt;= 6120 & sic &lt;= 6129) | (sic &gt;= 6130 & sic &lt;= 6139) | (sic &gt;= 6140 & sic &lt;= 6149) | (sic &gt;= 6150 & sic &lt;= 6159) | (sic &gt;= 6160 & sic &lt;= 6169) | (sic &gt;= 6170 & sic &lt;= 6179) | (sic &gt;= 6190 & sic &lt;= 6199) ~ \"Banking\",\n    (sic &gt;= 6300 & sic &lt;= 6300) | (sic &gt;= 6310 & sic &lt;= 6319) | (sic &gt;= 6320 & sic &lt;= 6329) | (sic &gt;= 6330 & sic &lt;= 6331) | (sic &gt;= 6350 & sic &lt;= 6351) | (sic &gt;= 6360 & sic &lt;= 6361) | (sic &gt;= 6370 & sic &lt;= 6379) | (sic &gt;= 6390 & sic &lt;= 6399) | (sic &gt;= 6400 & sic &lt;= 6411) ~ \"Insurance\",\n    (sic &gt;= 6500 & sic &lt;= 6500) | (sic &gt;= 6510 & sic &lt;= 6510) | (sic &gt;= 6512 & sic &lt;= 6512) | (sic &gt;= 6513 & sic &lt;= 6513) | (sic &gt;= 6514 & sic &lt;= 6514) | (sic &gt;= 6515 & sic &lt;= 6515) | (sic &gt;= 6517 & sic &lt;= 6519) | (sic &gt;= 6520 & sic &lt;= 6529) | (sic &gt;= 6530 & sic &lt;= 6531) | (sic &gt;= 6532 & sic &lt;= 6532) | (sic &gt;= 6540 & sic &lt;= 6541) | (sic &gt;= 6550 & sic &lt;= 6553) | (sic &gt;= 6590 & sic &lt;= 6599) | (sic &gt;= 6610 & sic &lt;= 6611) ~ \"Real Estate\",\n    (sic &gt;= 6200 & sic &lt;= 6299) | (sic &gt;= 6700 & sic &lt;= 6700) | (sic &gt;= 6710 & sic &lt;= 6719) | (sic &gt;= 6720 & sic &lt;= 6722) | (sic &gt;= 6723 & sic &lt;= 6723) | (sic &gt;= 6724 & sic &lt;= 6724) | (sic &gt;= 6725 & sic &lt;= 6725) | (sic &gt;= 6726 & sic &lt;= 6726) | (sic &gt;= 6730 & sic &lt;= 6733) | (sic &gt;= 6740 & sic &lt;= 6779) | (sic &gt;= 6790 & sic &lt;= 6791) | (sic &gt;= 6792 & sic &lt;= 6792) | (sic &gt;= 6793 & sic &lt;= 6793) | (sic &gt;= 6794 & sic &lt;= 6794) | (sic &gt;= 6795 & sic &lt;= 6795) | (sic &gt;= 6798 & sic &lt;= 6798) | (sic &gt;= 6799 & sic &lt;= 6799) ~ \"Trading\",\n    TRUE ~ \"Other\"\n  )\n}\n\nAssign FF49 industry number, given sic code.\n\nassign_FF49_num &lt;- function(sic) {\n  dplyr::case_when(\n    sic &gt;= 0100 & sic &lt;= 0199 ~ 1,\n    sic &gt;= 0200 & sic &lt;= 0299 ~ 1,\n    sic &gt;= 0700 & sic &lt;= 0799 ~ 1,\n    sic &gt;= 0910 & sic &lt;= 0919 ~ 1,\n    sic &gt;= 2048 & sic &lt;= 2048 ~ 1,\n    \n    sic &gt;= 2000 & sic &lt;= 2009 ~ 2,\n    sic &gt;= 2010 & sic &lt;= 2019 ~ 2,\n    sic &gt;= 2020 & sic &lt;= 2029 ~ 2,\n    sic &gt;= 2030 & sic &lt;= 2039 ~ 2,\n    sic &gt;= 2040 & sic &lt;= 2046 ~ 2,\n    sic &gt;= 2050 & sic &lt;= 2059 ~ 2,\n    sic &gt;= 2060 & sic &lt;= 2063 ~ 2,\n    sic &gt;= 2070 & sic &lt;= 2079 ~ 2,\n    sic &gt;= 2090 & sic &lt;= 2092 ~ 2,\n    sic &gt;= 2095 & sic &lt;= 2095 ~ 2,\n    sic &gt;= 2098 & sic &lt;= 2099 ~ 2,\n    \n    (sic &gt;= 2064 & sic &lt;= 2068) | (sic &gt;= 2086 & sic &lt;= 2086) | (sic &gt;= 2087 & sic &lt;= 2087) | (sic &gt;= 2096 & sic &lt;= 2096) | (sic &gt;= 2097 & sic &lt;= 2097) ~ 3,\n    (sic &gt;= 2080 & sic &lt;= 2080) | (sic &gt;= 2082 & sic &lt;= 2082) | (sic &gt;= 2083 & sic &lt;= 2083) | (sic &gt;= 2084 & sic &lt;= 2084) | (sic &gt;= 2085 & sic &lt;= 2085) ~ 4,\n    (sic &gt;= 2100 & sic &lt;= 2199) ~ 5,\n    (sic &gt;= 920 & sic &lt;= 999) | (sic &gt;= 3650 & sic &lt;= 3651) | (sic &gt;= 3652 & sic &lt;= 3652) | (sic &gt;= 3732 & sic &lt;= 3732) | (sic &gt;= 3930 & sic &lt;= 3931) | (sic &gt;= 3940 & sic &lt;= 3949) ~ 6,\n    (sic &gt;= 7800 & sic &lt;= 7829) | (sic &gt;= 7830 & sic &lt;= 7833) | (sic &gt;= 7840 & sic &lt;= 7841) | (sic &gt;= 7900 & sic &lt;= 7900) | (sic &gt;= 7910 & sic &lt;= 7911) | (sic &gt;= 7920 & sic &lt;= 7929) | (sic &gt;= 7930 & sic &lt;= 7933) | (sic &gt;= 7940 & sic &lt;= 7949) | (sic &gt;= 7980 & sic &lt;= 7980) | (sic &gt;= 7990 & sic &lt;= 7999) ~ 7,\n    (sic &gt;= 2700 & sic &lt;= 2709) | (sic &gt;= 2710 & sic &lt;= 2719) | (sic &gt;= 2720 & sic &lt;= 2729) | (sic &gt;= 2730 & sic &lt;= 2739) | (sic &gt;= 2740 & sic &lt;= 2749) | (sic &gt;= 2770 & sic &lt;= 2771) | (sic &gt;= 2780 & sic &lt;= 2789) | (sic &gt;= 2790 & sic &lt;= 2799) ~ 8,\n    (sic &gt;= 2047 & sic &lt;= 2047) | (sic &gt;= 2391 & sic &lt;= 2392) | (sic &gt;= 2510 & sic &lt;= 2519) | (sic &gt;= 2590 & sic &lt;= 2599) | (sic &gt;= 2840 & sic &lt;= 2843) | (sic &gt;= 2844 & sic &lt;= 2844) | (sic &gt;= 3160 & sic &lt;= 3161) | (sic &gt;= 3170 & sic &lt;= 3171) | (sic &gt;= 3172 & sic &lt;= 3172) | (sic &gt;= 3190 & sic &lt;= 3199) | (sic &gt;= 3229 & sic &lt;= 3229) | (sic &gt;= 3260 & sic &lt;= 3260) | (sic &gt;= 3262 & sic &lt;= 3263) | (sic &gt;= 3269 & sic &lt;= 3269) | (sic &gt;= 3230 & sic &lt;= 3231) | (sic &gt;= 3630 & sic &lt;= 3639) | (sic &gt;= 3750 & sic &lt;= 3751) | (sic &gt;= 3800 & sic &lt;= 3800) | (sic &gt;= 3860 & sic &lt;= 3861) | (sic &gt;= 3870 & sic &lt;= 3873) | (sic &gt;= 3910 & sic &lt;= 3911) | (sic &gt;= 3914 & sic &lt;= 3914) | (sic &gt;= 3915 & sic &lt;= 3915) | (sic &gt;= 3960 & sic &lt;= 3962) | (sic &gt;= 3991 & sic &lt;= 3991) | (sic &gt;= 3995 & sic &lt;= 3995) ~9,\n    (sic &gt;= 2300 & sic &lt;= 2390) | (sic &gt;= 3020 & sic &lt;= 3021) | (sic &gt;= 3100 & sic &lt;= 3111) | (sic &gt;= 3130 & sic &lt;= 3131) | (sic &gt;= 3140 & sic &lt;= 3149) | (sic &gt;= 3150 & sic &lt;= 3151) | (sic &gt;= 3963 & sic &lt;= 3965) ~ 10,\n    (sic &gt;= 8000 & sic &lt;= 8099) ~ 11,\n    (sic &gt;= 3693 & sic &lt;= 3693) | (sic &gt;= 3840 & sic &lt;= 3849) | (sic &gt;= 3850 & sic &lt;= 3851) ~ 12,\n    (sic &gt;= 2830 & sic &lt;= 2830) | (sic &gt;= 2831 & sic &lt;= 2831) | (sic &gt;= 2833 & sic &lt;= 2833) | (sic &gt;= 2834 & sic &lt;= 2834) | (sic &gt;= 2835 & sic &lt;= 2835) | (sic &gt;= 2836 & sic &lt;= 2836) ~ 13,\n    (sic &gt;= 2800 & sic &lt;= 2809) | (sic &gt;= 2810 & sic &lt;= 2819) | (sic &gt;= 2820 & sic &lt;= 2829) | (sic &gt;= 2850 & sic &lt;= 2859) | (sic &gt;= 2860 & sic &lt;= 2869) | (sic &gt;= 2870 & sic &lt;= 2879) | (sic &gt;= 2890 & sic &lt;= 2899) ~ 14,\n    (sic &gt;= 3031 & sic &lt;= 3031) | (sic &gt;= 3041 & sic &lt;= 3041) | (sic &gt;= 3050 & sic &lt;= 3053) | (sic &gt;= 3060 & sic &lt;= 3069) | (sic &gt;= 3070 & sic &lt;= 3079) | (sic &gt;= 3080 & sic &lt;= 3089) | (sic &gt;= 3090 & sic &lt;= 3099) ~ 15,\n    (sic &gt;= 2200 & sic &lt;= 2269) | (sic &gt;= 2270 & sic &lt;= 2279) | (sic &gt;= 2280 & sic &lt;= 2284) | (sic &gt;= 2290 & sic &lt;= 2295) | (sic &gt;= 2297 & sic &lt;= 2297) | (sic &gt;= 2298 & sic &lt;= 2298) | (sic &gt;= 2299 & sic &lt;= 2299) | (sic &gt;= 2393 & sic &lt;= 2395) | (sic &gt;= 2397 & sic &lt;= 2399) ~ 16,\n    (sic &gt;= 800 & sic &lt;= 899) | (sic &gt;= 2400 & sic &lt;= 2439) | (sic &gt;= 2450 & sic &lt;= 2459) | (sic &gt;= 2490 & sic &lt;= 2499) | (sic &gt;= 2660 & sic &lt;= 2661) | (sic &gt;= 2950 & sic &lt;= 2952) | (sic &gt;= 3200 & sic &lt;= 3200) | (sic &gt;= 3210 & sic &lt;= 3211) | (sic &gt;= 3240 & sic &lt;= 3241) | (sic &gt;= 3250 & sic &lt;= 3259) | (sic &gt;= 3261 & sic &lt;= 3261) | (sic &gt;= 3264 & sic &lt;= 3264) | (sic &gt;= 3270 & sic &lt;= 3275) | (sic &gt;= 3280 & sic &lt;= 3281) | (sic &gt;= 3290 & sic &lt;= 3293) | (sic &gt;= 3295 & sic &lt;= 3299) | (sic &gt;= 3420 & sic &lt;= 3429) | (sic &gt;= 3430 & sic &lt;= 3433) | (sic &gt;= 3440 & sic &lt;= 3441) | (sic &gt;= 3442 & sic &lt;= 3442) | (sic &gt;= 3446 & sic &lt;= 3446) | (sic &gt;= 3448 & sic &lt;= 3448) | (sic &gt;= 3449 & sic &lt;= 3449) | (sic &gt;= 3450 & sic &lt;= 3451) | (sic &gt;= 3452 & sic &lt;= 3452) | (sic &gt;= 3490 & sic &lt;= 3499) | (sic &gt;= 3996 & sic &lt;= 399) ~ 17,\n    (sic &gt;= 1500 & sic &lt;= 1511) | (sic &gt;= 1520 & sic &lt;= 1529) | (sic &gt;= 1530 & sic &lt;= 1539) | (sic &gt;= 1540 & sic &lt;= 1549) | (sic &gt;= 1600 & sic &lt;= 1699) | (sic &gt;= 1700 & sic &lt;= 1799) ~ 18,\n    (sic &gt;= 3300 & sic &lt;= 3300) | (sic &gt;= 3310 & sic &lt;= 3317) | (sic &gt;= 3320 & sic &lt;= 3325) | (sic &gt;= 3330 & sic &lt;= 3339) | (sic &gt;= 3340 & sic &lt;= 3341) | (sic &gt;= 3350 & sic &lt;= 3357) | (sic &gt;= 3360 & sic &lt;= 3369) | (sic &gt;= 3370 & sic &lt;= 3379) | (sic &gt;= 3390 & sic &lt;= 3399) ~ 19,\n    (sic &gt;= 3400 & sic &lt;= 3400) | (sic &gt;= 3443 & sic &lt;= 3443) | (sic &gt;= 3444 & sic &lt;= 3444) | (sic &gt;= 3460 & sic &lt;= 3469) | (sic &gt;= 3470 & sic &lt;= 3479) ~ 20,\n    (sic &gt;= 3510 & sic &lt;= 3519) | (sic &gt;= 3520 & sic &lt;= 3529) | (sic &gt;= 3530 & sic &lt;= 3530) | (sic &gt;= 3531 & sic &lt;= 3531) | (sic &gt;= 3532 & sic &lt;= 3532) | (sic &gt;= 3533 & sic &lt;= 3533) | (sic &gt;= 3534 & sic &lt;= 3534) | (sic &gt;= 3535 & sic &lt;= 3535) | (sic &gt;= 3536 & sic &lt;= 3536) | (sic &gt;= 3538 & sic &lt;= 3538) | (sic &gt;= 3540 & sic &lt;= 3549) | (sic &gt;= 3550 & sic &lt;= 3559) | (sic &gt;= 3560 & sic &lt;= 3569) | (sic &gt;= 3580 & sic &lt;= 3580) | (sic &gt;= 3581 & sic &lt;= 3581) | (sic &gt;= 3582 & sic &lt;= 3582) | (sic &gt;= 3585 & sic &lt;= 3585) | (sic &gt;= 3586 & sic &lt;= 3586) | (sic &gt;= 3589 & sic &lt;= 3589) | (sic &gt;= 3590 & sic &lt;= 3599) ~ 21,\n    (sic &gt;= 3600 & sic &lt;= 3600) | (sic &gt;= 3610 & sic &lt;= 3613) | (sic &gt;= 3620 & sic &lt;= 3621) | (sic &gt;= 3623 & sic &lt;= 3629) | (sic &gt;= 3640 & sic &lt;= 3644) | (sic &gt;= 3645 & sic &lt;= 3645) | (sic &gt;= 3646 & sic &lt;= 3646) | (sic &gt;= 3648 & sic &lt;= 3649) | (sic &gt;= 3660 & sic &lt;= 3660) | (sic &gt;= 3690 & sic &lt;= 3690) | (sic &gt;= 3691 & sic &lt;= 3692) | (sic &gt;= 3699 & sic &lt;= 3699) ~ 22,\n    (sic &gt;= 2296 & sic &lt;= 2296) | (sic &gt;= 2396 & sic &lt;= 2396) | (sic &gt;= 3010 & sic &lt;= 3011) | (sic &gt;= 3537 & sic &lt;= 3537) | (sic &gt;= 3647 & sic &lt;= 3647) | (sic &gt;= 3694 & sic &lt;= 3694) | (sic &gt;= 3700 & sic &lt;= 3700) | (sic &gt;= 3710 & sic &lt;= 3710) | (sic &gt;= 3711 & sic &lt;= 3711) | (sic &gt;= 3713 & sic &lt;= 3713) | (sic &gt;= 3714 & sic &lt;= 3714) | (sic &gt;= 3715 & sic &lt;= 3715) | (sic &gt;= 3716 & sic &lt;= 3716) | (sic &gt;= 3792 & sic &lt;= 3792) | (sic &gt;= 3790 & sic &lt;= 3791) | (sic &gt;= 3799 & sic &lt;= 3799) ~ 23,\n    (sic &gt;= 3720 & sic &lt;= 3720) | (sic &gt;= 3721 & sic &lt;= 3721) | (sic &gt;= 3723 & sic &lt;= 3724) | (sic &gt;= 3725 & sic &lt;= 3725) | (sic &gt;= 3728 & sic &lt;= 3729) ~ 24,\n    (sic &gt;= 3730 & sic &lt;= 3731) | (sic &gt;= 3740 & sic &lt;= 3743) ~ 25,\n    (sic &gt;= 3760 & sic &lt;= 3769) | (sic &gt;= 3795 & sic &lt;= 3795) | (sic &gt;= 3480 & sic &lt;= 3489) ~ 26,\n    (sic &gt;= 1040 & sic &lt;= 1049) ~ 27,\n    (sic &gt;= 1000 & sic &lt;= 1009) | (sic &gt;= 1010 & sic &lt;= 1019) | (sic &gt;= 1020 & sic &lt;= 1029) | (sic &gt;= 1030 & sic &lt;= 1039) | (sic &gt;= 1050 & sic &lt;= 1059) | (sic &gt;= 1060 & sic &lt;= 1069) | (sic &gt;= 1070 & sic &lt;= 1079) | (sic &gt;= 1080 & sic &lt;= 1089) | (sic &gt;= 1090 & sic &lt;= 1099) | (sic &gt;= 1100 & sic &lt;= 1119) | (sic &gt;= 1400 & sic &lt;= 1499) ~28,\n    (sic &gt;= 1200 & sic &lt;= 1299) ~ 29,\n    (sic &gt;= 1300 & sic &lt;= 1300) | (sic &gt;= 1310 & sic &lt;= 1319) | (sic &gt;= 1320 & sic &lt;= 1329) | (sic &gt;= 1330 & sic &lt;= 1339) | (sic &gt;= 1370 & sic &lt;= 1379) | (sic &gt;= 1380 & sic &lt;= 1380) | (sic &gt;= 1381 & sic &lt;= 1381) | (sic &gt;= 1382 & sic &lt;= 1382) | (sic &gt;= 1389 & sic &lt;= 1389) | (sic &gt;= 2900 & sic &lt;= 2912) | (sic &gt;= 2990 & sic &lt;= 2999) ~30,\n    (sic &gt;= 4900 & sic &lt;= 4900) | (sic &gt;= 4910 & sic &lt;= 4911) | (sic &gt;= 4920 & sic &lt;= 4922) | (sic &gt;= 4923 & sic &lt;= 4923) | (sic &gt;= 4924 & sic &lt;= 4925) | (sic &gt;= 4930 & sic &lt;= 4931) | (sic &gt;= 4932 & sic &lt;= 4932) | (sic &gt;= 4939 & sic &lt;= 4939) | (sic &gt;= 4940 & sic &lt;= 4942) ~ 31,\n    (sic &gt;= 4800 & sic &lt;= 4800) | (sic &gt;= 4810 & sic &lt;= 4813) | (sic &gt;= 4820 & sic &lt;= 4822) | (sic &gt;= 4830 & sic &lt;= 4839) | (sic &gt;= 4840 & sic &lt;= 4841) | (sic &gt;= 4880 & sic &lt;= 4889) | (sic &gt;= 4890 & sic &lt;= 4890) | (sic &gt;= 4891 & sic &lt;= 4891) | (sic &gt;= 4892 & sic &lt;= 4892) | (sic &gt;= 4899 & sic &lt;= 4899) ~ 32,\n    (sic &gt;= 7020 & sic &lt;= 7021) | (sic &gt;= 7030 & sic &lt;= 7033) | (sic &gt;= 7200 & sic &lt;= 7200) | (sic &gt;= 7210 & sic &lt;= 7212) | (sic &gt;= 7214 & sic &lt;= 7214) | (sic &gt;= 7215 & sic &lt;= 7216) | (sic &gt;= 7217 & sic &lt;= 7217) | (sic &gt;= 7219 & sic &lt;= 7219) | (sic &gt;= 7220 & sic &lt;= 7221) | (sic &gt;= 7230 & sic &lt;= 7231) | (sic &gt;= 7240 & sic &lt;= 7241) | (sic &gt;= 7250 & sic &lt;= 7251) | (sic &gt;= 7260 & sic &lt;= 7269) | (sic &gt;= 7270 & sic &lt;= 7290) | (sic &gt;= 7291 & sic &lt;= 7291) | (sic &gt;= 7292 & sic &lt;= 7299) | (sic &gt;= 7395 & sic &lt;= 7395) | (sic &gt;= 7500 & sic &lt;= 7500) | (sic &gt;= 7520 & sic &lt;= 7529) | (sic &gt;= 7530 & sic &lt;= 7539) | (sic &gt;= 7540 & sic &lt;= 7549) | (sic &gt;= 7600 & sic &lt;= 7600) | (sic &gt;= 7620 & sic &lt;= 7620) | (sic &gt;= 7622 & sic &lt;= 7622) | (sic &gt;= 7623 & sic &lt;= 7623) | (sic &gt;= 7629 & sic &lt;= 7629) | (sic &gt;= 7630 & sic &lt;= 7631) | (sic &gt;= 7640 & sic &lt;= 7641) | (sic &gt;= 7690 & sic &lt;= 7699) | (sic &gt;= 8100 & sic &lt;= 8199) | (sic &gt;= 8200 & sic &lt;= 8299) | (sic &gt;= 8300 & sic &lt;= 8399) | (sic &gt;= 8400 & sic &lt;= 8499) | (sic &gt;= 8600 & sic &lt;= 8699) | (sic &gt;= 8800 & sic &lt;= 8899) | (sic &gt;= 7510 & sic &lt;= 7515) ~33,\n    (sic &gt;= 2750 & sic &lt;= 2759) | (sic &gt;= 3993 & sic &lt;= 3993) | (sic &gt;= 7218 & sic &lt;= 7218) | (sic &gt;= 7300 & sic &lt;= 7300) | (sic &gt;= 7310 & sic &lt;= 7319) | (sic &gt;= 7320 & sic &lt;= 7329) | (sic &gt;= 7330 & sic &lt;= 7339) | (sic &gt;= 7340 & sic &lt;= 7342) | (sic &gt;= 7349 & sic &lt;= 7349) | (sic &gt;= 7350 & sic &lt;= 7351) | (sic &gt;= 7352 & sic &lt;= 7352) | (sic &gt;= 7353 & sic &lt;= 7353) | (sic &gt;= 7359 & sic &lt;= 7359) | (sic &gt;= 7360 & sic &lt;= 7369) | (sic &gt;= 7374 & sic &lt;= 7374) | (sic &gt;= 7376 & sic &lt;= 7376) | (sic &gt;= 7377 & sic &lt;= 7377) | (sic &gt;= 7378 & sic &lt;= 7378) | (sic &gt;= 7379 & sic &lt;= 7379) | (sic &gt;= 7380 & sic &lt;= 7380) | (sic &gt;= 7381 & sic &lt;= 7382) | (sic &gt;= 7383 & sic &lt;= 7383) | (sic &gt;= 7384 & sic &lt;= 7384) | (sic &gt;= 7385 & sic &lt;= 7385) | (sic &gt;= 7389 & sic &lt;= 7390) | (sic &gt;= 7391 & sic &lt;= 7391) | (sic &gt;= 7392 & sic &lt;= 7392) | (sic &gt;= 7393 & sic &lt;= 7393) | (sic &gt;= 7394 & sic &lt;= 7394) | (sic &gt;= 7396 & sic &lt;= 7396) | (sic &gt;= 7397 & sic &lt;= 7397) | (sic &gt;= 7399 & sic &lt;= 7399) | (sic &gt;= 7519 & sic &lt;= 7519) | (sic &gt;= 8700 & sic &lt;= 8700) | (sic &gt;= 8710 & sic &lt;= 8713) | (sic &gt;= 8720 & sic &lt;= 8721) | (sic &gt;= 8730 & sic &lt;= 8734) | (sic &gt;= 8740 & sic &lt;= 8748) | (sic &gt;= 8900 & sic &lt;= 8910) | (sic &gt;= 8911 & sic &lt;= 8911) | (sic &gt;= 8920 & sic &lt;= 8999) | (sic &gt;= 4220 & sic &lt;= 4229) ~ 34,\n    (sic &gt;= 3570 & sic &lt;= 3579) | (sic &gt;= 3680 & sic &lt;= 3680) | (sic &gt;= 3681 & sic &lt;= 3681) | (sic &gt;= 3682 & sic &lt;= 3682) | (sic &gt;= 3683 & sic &lt;= 3683) | (sic &gt;= 3684 & sic &lt;= 3684) | (sic &gt;= 3685 & sic &lt;= 3685) | (sic &gt;= 3686 & sic &lt;= 3686) | (sic &gt;= 3687 & sic &lt;= 3687) | (sic &gt;= 3688 & sic &lt;= 3688) | (sic &gt;= 3689 & sic &lt;= 3689) | (sic &gt;= 3695 & sic &lt;= 3695) ~ 35,\n    (sic &gt;= 7370 & sic &lt;= 7372) | (sic &gt;= 7375 & sic &lt;= 7375) | (sic &gt;= 7373 & sic &lt;= 7373) ~ 36,\n    (sic &gt;= 3622 & sic &lt;= 3622) | (sic &gt;= 3661 & sic &lt;= 3661) | (sic &gt;= 3662 & sic &lt;= 3662) | (sic &gt;= 3663 & sic &lt;= 3663) | (sic &gt;= 3664 & sic &lt;= 3664) | (sic &gt;= 3665 & sic &lt;= 3665) | (sic &gt;= 3666 & sic &lt;= 3666) | (sic &gt;= 3669 & sic &lt;= 3669) | (sic &gt;= 3670 & sic &lt;= 3679) | (sic &gt;= 3810 & sic &lt;= 3810) | (sic &gt;= 3812 & sic &lt;= 3812) ~ 37,\n    (sic &gt;= 3811 & sic &lt;= 3811) | (sic &gt;= 3820 & sic &lt;= 3820) | (sic &gt;= 3821 & sic &lt;= 3821) | (sic &gt;= 3822 & sic &lt;= 3822) | (sic &gt;= 3823 & sic &lt;= 3823) | (sic &gt;= 3824 & sic &lt;= 3824) | (sic &gt;= 3825 & sic &lt;= 3825) | (sic &gt;= 3826 & sic &lt;= 3826) | (sic &gt;= 3827 & sic &lt;= 3827) | (sic &gt;= 3829 & sic &lt;= 3829) | (sic &gt;= 3830 & sic &lt;= 3839) ~ 38,\n    (sic &gt;= 2520 & sic &lt;= 2549) | (sic &gt;= 2600 & sic &lt;= 2639) | (sic &gt;= 2670 & sic &lt;= 2699) | (sic &gt;= 2760 & sic &lt;= 2761) | (sic &gt;= 3950 & sic &lt;= 3955) ~ 39,\n    (sic &gt;= 2440 & sic &lt;= 2449) | (sic &gt;= 2640 & sic &lt;= 2659) | (sic &gt;= 3220 & sic &lt;= 3221) | (sic &gt;= 3410 & sic &lt;= 3412) ~ 40,\n    (sic &gt;= 4000 & sic &lt;= 4013) | (sic &gt;= 4040 & sic &lt;= 4049) | (sic &gt;= 4100 & sic &lt;= 4100) | (sic &gt;= 4110 & sic &lt;= 4119) | (sic &gt;= 4120 & sic &lt;= 4121) | (sic &gt;= 4130 & sic &lt;= 4131) | (sic &gt;= 4140 & sic &lt;= 4142) | (sic &gt;= 4150 & sic &lt;= 4151) | (sic &gt;= 4170 & sic &lt;= 4173) | (sic &gt;= 4190 & sic &lt;= 4199) | (sic &gt;= 4200 & sic &lt;= 4200) | (sic &gt;= 4210 & sic &lt;= 4219) | (sic &gt;= 4230 & sic &lt;= 4231) | (sic &gt;= 4240 & sic &lt;= 4249) | (sic &gt;= 4400 & sic &lt;= 4499) | (sic &gt;= 4500 & sic &lt;= 4599) | (sic &gt;= 4600 & sic &lt;= 4699) | (sic &gt;= 4700 & sic &lt;= 4700) | (sic &gt;= 4710 & sic &lt;= 4712) | (sic &gt;= 4720 & sic &lt;= 4729) | (sic &gt;= 4730 & sic &lt;= 4739) | (sic &gt;= 4740 & sic &lt;= 4749) | (sic &gt;= 4780 & sic &lt;= 4780) | (sic &gt;= 4782 & sic &lt;= 4782) | (sic &gt;= 4783 & sic &lt;= 4783) | (sic &gt;= 4784 & sic &lt;= 4784) | (sic &gt;= 4785 & sic &lt;= 4785) | (sic &gt;= 4789 & sic &lt;= 4789) ~41,\n    (sic &gt;= 5000 & sic &lt;= 5000) | (sic &gt;= 5010 & sic &lt;= 5015) | (sic &gt;= 5020 & sic &lt;= 5023) | (sic &gt;= 5030 & sic &lt;= 5039) | (sic &gt;= 5040 & sic &lt;= 5042) | (sic &gt;= 5043 & sic &lt;= 5043) | (sic &gt;= 5044 & sic &lt;= 5044) | (sic &gt;= 5045 & sic &lt;= 5045) | (sic &gt;= 5046 & sic &lt;= 5046) | (sic &gt;= 5047 & sic &lt;= 5047) | (sic &gt;= 5048 & sic &lt;= 5048) | (sic &gt;= 5049 & sic &lt;= 5049) | (sic &gt;= 5050 & sic &lt;= 5059) | (sic &gt;= 5060 & sic &lt;= 5060) | (sic &gt;= 5063 & sic &lt;= 5063) | (sic &gt;= 5064 & sic &lt;= 5064) | (sic &gt;= 5065 & sic &lt;= 5065) | (sic &gt;= 5070 & sic &lt;= 5078) | (sic &gt;= 5080 & sic &lt;= 5080) | (sic &gt;= 5081 & sic &lt;= 5081) | (sic &gt;= 5082 & sic &lt;= 5082) | (sic &gt;= 5083 & sic &lt;= 5083) | (sic &gt;= 5084 & sic &lt;= 5084) | (sic &gt;= 5085 & sic &lt;= 5085) | (sic &gt;= 5086 & sic &lt;= 5087) | (sic &gt;= 5088 & sic &lt;= 5088) | (sic &gt;= 5090 & sic &lt;= 5090) | (sic &gt;= 5091 & sic &lt;= 5092) | (sic &gt;= 5093 & sic &lt;= 5093) | (sic &gt;= 5094 & sic &lt;= 5094) | (sic &gt;= 5099 & sic &lt;= 5099) | (sic &gt;= 5100 & sic &lt;= 5100) | (sic &gt;= 5110 & sic &lt;= 5113) | (sic &gt;= 5120 & sic &lt;= 5122) | (sic &gt;= 5130 & sic &lt;= 5139) | (sic &gt;= 5140 & sic &lt;= 5149) | (sic &gt;= 5150 & sic &lt;= 5159) | (sic &gt;= 5160 & sic &lt;= 5169) | (sic &gt;= 5170 & sic &lt;= 5172) | (sic &gt;= 5180 & sic &lt;= 5182) | (sic &gt;= 5190 & sic &lt;= 5199) ~ 42,\n    (sic &gt;= 5200 & sic &lt;= 5200) | (sic &gt;= 5210 & sic &lt;= 5219) | (sic &gt;= 5220 & sic &lt;= 5229) | (sic &gt;= 5230 & sic &lt;= 5231) | (sic &gt;= 5250 & sic &lt;= 5251) | (sic &gt;= 5260 & sic &lt;= 5261) | (sic &gt;= 5270 & sic &lt;= 5271) | (sic &gt;= 5300 & sic &lt;= 5300) | (sic &gt;= 5310 & sic &lt;= 5311) | (sic &gt;= 5320 & sic &lt;= 5320) | (sic &gt;= 5330 & sic &lt;= 5331) | (sic &gt;= 5334 & sic &lt;= 5334) | (sic &gt;= 5340 & sic &lt;= 5349) | (sic &gt;= 5390 & sic &lt;= 5399) | (sic &gt;= 5400 & sic &lt;= 5400) | (sic &gt;= 5410 & sic &lt;= 5411) | (sic &gt;= 5412 & sic &lt;= 5412) | (sic &gt;= 5420 & sic &lt;= 5429) | (sic &gt;= 5430 & sic &lt;= 5439) | (sic &gt;= 5440 & sic &lt;= 5449) | (sic &gt;= 5450 & sic &lt;= 5459) | (sic &gt;= 5460 & sic &lt;= 5469) | (sic &gt;= 5490 & sic &lt;= 5499) | (sic &gt;= 5500 & sic &lt;= 5500) | (sic &gt;= 5510 & sic &lt;= 5529) | (sic &gt;= 5530 & sic &lt;= 5539) | (sic &gt;= 5540 & sic &lt;= 5549) | (sic &gt;= 5550 & sic &lt;= 5559) | (sic &gt;= 5560 & sic &lt;= 5569) | (sic &gt;= 5570 & sic &lt;= 5579) | (sic &gt;= 5590 & sic &lt;= 5599) | (sic &gt;= 5600 & sic &lt;= 5699) | (sic &gt;= 5700 & sic &lt;= 5700) | (sic &gt;= 5710 & sic &lt;= 5719) | (sic &gt;= 5720 & sic &lt;= 5722) | (sic &gt;= 5730 & sic &lt;= 5733) | (sic &gt;= 5734 & sic &lt;= 5734) | (sic &gt;= 5735 & sic &lt;= 5735) | (sic &gt;= 5736 & sic &lt;= 5736) | (sic &gt;= 5750 & sic &lt;= 5799) | (sic &gt;= 5900 & sic &lt;= 5900) | (sic &gt;= 5910 & sic &lt;= 5912) | (sic &gt;= 5920 & sic &lt;= 5929) | (sic &gt;= 5930 & sic &lt;= 5932) | (sic &gt;= 5940 & sic &lt;= 5940) | (sic &gt;= 5941 & sic &lt;= 5941) | (sic &gt;= 5942 & sic &lt;= 5942) | (sic &gt;= 5943 & sic &lt;= 5943) | (sic &gt;= 5944 & sic &lt;= 5944) | (sic &gt;= 5945 & sic &lt;= 5945) | (sic &gt;= 5946 & sic &lt;= 5946) | (sic &gt;= 5947 & sic &lt;= 5947) | (sic &gt;= 5948 & sic &lt;= 5948) | (sic &gt;= 5949 & sic &lt;= 5949) | (sic &gt;= 5950 & sic &lt;= 5959) | (sic &gt;= 5960 & sic &lt;= 5969) | (sic &gt;= 5970 & sic &lt;= 5979) | (sic &gt;= 5980 & sic &lt;= 5989) | (sic &gt;= 5990 & sic &lt;= 5990) | (sic &gt;= 5992 & sic &lt;= 5992) | (sic &gt;= 5993 & sic &lt;= 5993) | (sic &gt;= 5994 & sic &lt;= 5994) | (sic &gt;= 5995 & sic &lt;= 5995) | (sic &gt;= 5999 & sic &lt;= 5999) ~ 43,\n    (sic &gt;= 5800 & sic &lt;= 5819) | (sic &gt;= 5820 & sic &lt;= 5829) | (sic &gt;= 5890 & sic &lt;= 5899) | (sic &gt;= 7000 & sic &lt;= 7000) | (sic &gt;= 7010 & sic &lt;= 7019) | (sic &gt;= 7040 & sic &lt;= 7049) | (sic &gt;= 7213 & sic &lt;= 7213) ~ 44,\n    (sic &gt;= 6000 & sic &lt;= 6000) | (sic &gt;= 6010 & sic &lt;= 6019) | (sic &gt;= 6020 & sic &lt;= 6020) | (sic &gt;= 6021 & sic &lt;= 6021) | (sic &gt;= 6022 & sic &lt;= 6022) | (sic &gt;= 6023 & sic &lt;= 6024) | (sic &gt;= 6025 & sic &lt;= 6025) | (sic &gt;= 6026 & sic &lt;= 6026) | (sic &gt;= 6027 & sic &lt;= 6027) | (sic &gt;= 6028 & sic &lt;= 6029) | (sic &gt;= 6030 & sic &lt;= 6036) | (sic &gt;= 6040 & sic &lt;= 6059) | (sic &gt;= 6060 & sic &lt;= 6062) | (sic &gt;= 6080 & sic &lt;= 6082) | (sic &gt;= 6090 & sic &lt;= 6099) | (sic &gt;= 6100 & sic &lt;= 6100) | (sic &gt;= 6110 & sic &lt;= 6111) | (sic &gt;= 6112 & sic &lt;= 6113) | (sic &gt;= 6120 & sic &lt;= 6129) | (sic &gt;= 6130 & sic &lt;= 6139) | (sic &gt;= 6140 & sic &lt;= 6149) | (sic &gt;= 6150 & sic &lt;= 6159) | (sic &gt;= 6160 & sic &lt;= 6169) | (sic &gt;= 6170 & sic &lt;= 6179) | (sic &gt;= 6190 & sic &lt;= 6199) ~ 45,\n    (sic &gt;= 6300 & sic &lt;= 6300) | (sic &gt;= 6310 & sic &lt;= 6319) | (sic &gt;= 6320 & sic &lt;= 6329) | (sic &gt;= 6330 & sic &lt;= 6331) | (sic &gt;= 6350 & sic &lt;= 6351) | (sic &gt;= 6360 & sic &lt;= 6361) | (sic &gt;= 6370 & sic &lt;= 6379) | (sic &gt;= 6390 & sic &lt;= 6399) | (sic &gt;= 6400 & sic &lt;= 6411) ~ 46,\n    (sic &gt;= 6500 & sic &lt;= 6500) | (sic &gt;= 6510 & sic &lt;= 6510) | (sic &gt;= 6512 & sic &lt;= 6512) | (sic &gt;= 6513 & sic &lt;= 6513) | (sic &gt;= 6514 & sic &lt;= 6514) | (sic &gt;= 6515 & sic &lt;= 6515) | (sic &gt;= 6517 & sic &lt;= 6519) | (sic &gt;= 6520 & sic &lt;= 6529) | (sic &gt;= 6530 & sic &lt;= 6531) | (sic &gt;= 6532 & sic &lt;= 6532) | (sic &gt;= 6540 & sic &lt;= 6541) | (sic &gt;= 6550 & sic &lt;= 6553) | (sic &gt;= 6590 & sic &lt;= 6599) | (sic &gt;= 6610 & sic &lt;= 6611) ~ 47,\n    (sic &gt;= 6200 & sic &lt;= 6299) | (sic &gt;= 6700 & sic &lt;= 6700) | (sic &gt;= 6710 & sic &lt;= 6719) | (sic &gt;= 6720 & sic &lt;= 6722) | (sic &gt;= 6723 & sic &lt;= 6723) | (sic &gt;= 6724 & sic &lt;= 6724) | (sic &gt;= 6725 & sic &lt;= 6725) | (sic &gt;= 6726 & sic &lt;= 6726) | (sic &gt;= 6730 & sic &lt;= 6733) | (sic &gt;= 6740 & sic &lt;= 6779) | (sic &gt;= 6790 & sic &lt;= 6791) | (sic &gt;= 6792 & sic &lt;= 6792) | (sic &gt;= 6793 & sic &lt;= 6793) | (sic &gt;= 6794 & sic &lt;= 6794) | (sic &gt;= 6795 & sic &lt;= 6795) | (sic &gt;= 6798 & sic &lt;= 6798) | (sic &gt;= 6799 & sic &lt;= 6799) ~ 48,\n    TRUE ~ 49\n  )\n}\nmessage(\"imported industry functions\") #Check whether all industry functions are defined\n\nimported industry functions\n\n\n\n\n3.3.4 Variable transformation functions\nBelow is a general function to standardize a variable to mean zero, and standard deviation of one. This is sometimes handy to compare different time series.\n\nstandardize &lt;- function(x){\n  (x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)\n}\n\nBelow is a general function to winsorize a variable in a mutate statement. Note that, winsorization does not remove the extreme values, it sets the extreme values to some specified values (e.g. 1st and 99th percentile).\n\nwinsorize_x = function(x, cuts = c(0.01,0.01)) {\n  cut_point_top &lt;- quantile(x, 1 - cuts[2], na.rm = T)\n  cut_point_bottom &lt;- quantile(x, cuts[1], na.rm = T)\n  i = which(x &gt;= cut_point_top)\n  x[i] = cut_point_top\n  j = which(x &lt;= cut_point_bottom)\n  x[j] = cut_point_bottom\n  return(x)\n}\n\nBelow is a general function to truncate a variable in a mutate statement. Unlike winsorization, truncation does remove the extreme values.\n\ntruncate_x = function(x, cuts = c(0.01,0.01)) {\n  cut_point_top &lt;- quantile(x, 1 - cuts[2], na.rm = T)\n  cut_point_bottom &lt;- quantile(x, cuts[1], na.rm = T)\n  i = which(x &gt;= cut_point_top)\n  x[i] = NA_real_\n  j = which(x &lt;= cut_point_bottom)\n  x[j] = NA_real_\n  return(x)\n}\n\nmessage(\"imported transformation functions\") #Check whether all transformation functions are created\n\nimported transformation functions",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installing Packages, Setting Global Parameters, and Creating Necessary Functions</span>"
    ]
  },
  {
    "objectID": "obtain-data.html",
    "href": "obtain-data.html",
    "title": "4  Obtaining and Merging Data",
    "section": "",
    "text": "Parquet files offer significant advantages when dealing with large datasets that need to be retrieved, stored, and merged efficiently. Their columnar storage format allows reading only the necessary columns instead of scanning the entire dataset, making data retrieval much faster compared to traditional formats like CSV or Stata. Additionally, Parquet optimizes input/output operations, reducing the amount of data that needs to be read from disk, which speeds up processing times when merging multiple datasets.\nAnother key benefit of Parquet is its efficient storage and compression capabilities. Unlike CSV or Stata files, which store data in a row-based format, Parquet applies built-in compression algorithms such as Gzip or Snappy, significantly reducing file size. This not only saves disk space but also speeds up data transfer, especially when obtaining datasets from remote servers like WRDS, AWS, or PostgreSQL databases.\nParquet files also ensure schema consistency and data type preservation, which is crucial when merging datasets from different sources. In contrast to CSV files, where numerical values may sometimes be interpreted as text, Parquet maintains strict data types. It also efficiently handles missing values, reducing potential errors and inconsistencies when performing joins and merges.\nWhen merging large datasets, Parquet’s columnar format and filtering capabilities help reduce memory usage and processing time. Instead of loading entire datasets into memory, users can select and load only the relevant columns before merging, significantly optimizing resource allocation. Additionally, Parquet is highly compatible with modern data science tools, supporting parallel computing and batch processing with frameworks like Spark, Dask, and DuckDB.\nParquet’s cross-platform support makes it ideal for working in R, Python (pandas, pyarrow, Polars), SQL databases, and cloud platforms such as AWS S3 and Google BigQuery. This ensures seamless integration with existing workflows, whether working on local machines or in cloud-based data pipelines. Given its speed, storage efficiency, and compatibility, Parquet is a preferred format for obtaining and merging large financial datasets from sources like Compustat, CRSP, and other WRDS databases.\nLet’s first learn how to obtain data from WRDS. The code below shows how to connect to WRDS.\n\n# Setup ------------------------------------------------------------------------\n\n# Load Libraries [i.e., packages]\nlibrary(dbplyr)\nlibrary(RPostgres)\nlibrary(DBI)\nlibrary(glue)\nlibrary(arrow)\n\n\nAttaching package: 'arrow'\n\n\nThe following object is masked from 'package:utils':\n\n    timestamp\n\nlibrary(haven)\nlibrary(tictoc) #very optional timer, mostly as a teaching example\nlibrary(tidyverse) # I like to load tidyverse last to avoid package conflicts\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ lubridate::duration() masks arrow::duration()\n✖ dplyr::filter()       masks stats::filter()\n✖ dplyr::ident()        masks dbplyr::ident()\n✖ dplyr::lag()          masks stats::lag()\n✖ dplyr::sql()          masks dbplyr::sql()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#load helper scripts\n#similar to \"include\" statement in SAS.\nsource(\"src/-Global-Parameters.R\")\nsource(\"src/utils.R\")\n\nset R formatting options\nimported parquet functions\nimported industry functions\nimported transformation functions\n\n# Log into wrds ----------------------------------------------------------------\n\nif(exists(\"wrds\")){\n  dbDisconnect(wrds)  # because otherwise WRDS might time out\n}\nwrds &lt;- dbConnect(Postgres(),\n                  host = 'wrds-pgdata.wharton.upenn.edu',\n                  port = 9737,\n                  user = keyring::key_get(\"WRDS_USER\"),\n                  password = keyring::key_get(\"WRDS_PW\"),\n                  sslmode = 'require',\n                  dbname = 'wrds')\n\nThe R script below retrieves and processes financial data from the Compustat database using PostgreSQL on the WRDS server. It begins by listing available tables within a specified schema and then loads the necessary datasets (funda and company). Applying standard filters, it selects key financial variables, merges company-level information, and constructs industry classifications. Additional variables, such as market value of equity (MVE) and earnings before special items, are derived. The dataset is filtered to retain U.S. firms from 1967 onward while excluding financial and utility firms.\n\n# See a list of tables in a schema ---------------------------------------------\n# Just an example to play with the Postgres server\n\n# List all of the tables in Compustat (comp)\nwrds |&gt;\n  DBI::dbListObjects(DBI::Id(schema = 'comp')) |&gt; \n  dplyr::pull(table) |&gt; \n  purrr::map(~slot(.x, 'name'))  |&gt; \n  dplyr::bind_rows()  |&gt;  \n  View()\n# can replace \"comp\" with any schema such as \"crsp\" \"ibes\" etc.\n# schemas on the Postgres server are similar to WRDS SAS libraries\n\n# Load table references and download data --------------------------------------\n\n# Load funda as a tbl\ncomp.funda &lt;- tbl(wrds,in_schema(\"comp\", \"funda\"))\ncomp.company &lt;- tbl(wrds,in_schema(\"comp\", \"company\"))\n\n# Optional line:\n#if you want to see how long a block of code takes you can start a tictoc timer\n#it will tell you how long it takes between when you run tic() and when you run \n# toc()\ntictoc::tic()\n\n# Get some raw Compustat data from funda\nraw_funda &lt;-\n  comp.funda |&gt; \n  #Apply standard Compustat filters\n  filter(indfmt=='INDL', datafmt=='STD', popsrc=='D' ,consol=='C') |&gt;\n  #Select the variables we want to download\n  #the pattern for inline renaming is \n  #new_name = old_name\n  select(conm, gvkey, datadate, fyear, fyr, cstat_cusip=cusip, #inline renaming\n         cik, cstat_ticker= tic, sich, ib, spi, at, xrd, ceq, sale,\n         csho, prcc_f\n  ) |&gt; \n  #Merge with the Compustat Company file for header SIC code and GICs code\n  inner_join(select(comp.company, gvkey, sic, fic, gind), by=\"gvkey\") |&gt; \n  #Use historical sic [sich] when available. Otherwise use header sic [sic]\n  mutate(sic4 = coalesce(sich, as.numeric(sic))) |&gt; \n  #Calculate two digit sic code\n  mutate(sic2 = floor(sic4/100)) |&gt; \n  #Delete financial and utility industries\n  #For some research projects this is common to remove highly regulated firms\n  #with unique accounting practices\n  filter(!between(sic2,60,69),\n         sic2 != 49) |&gt; \n  # replace missings with 0 for defined vars\n  mutate(across(c(spi, xrd),\n            ~ coalesce(., 0))) |&gt; \n  # create a few additional variables\n  mutate(\n    # Some example code to align the data in June calendar time. \n    # Some papers use June of each year and assume a 3 month reporting lag.\n    # Effectively this is coded as aligning datadate as of March each year.\n    # See, for example, Hou, Van Dijk, and Zhang (2012 JAE) figure 1\n    # This example also demonstrates injecting sql into dplyr code\n    calyear = if_else( fyr &gt; 3,\n                       sql(\"extract(year from datadate)\")+1,\n                       sql(\"extract(year from datadate)\")),\n    # mve is market value of equity\n    mve = csho * prcc_f,\n    # define earnings (e) as earnings before special items\n    e= ib-spi,\n  ) |&gt;\n  # filter to fiscal years after 1955, not much in Compustat before that \n  filter(1967 &lt; fyear) |&gt; \n  # filter to US companies\n  filter(fic==\"USA\") |&gt; \n  # everything above manupulates the data inside the WRDS postgres server\n  #behind the scenes it generates efficient sql code\n  # below line downloads to local machine RAM\n  collect()\n  #if you comment out the above collect() and instead run below command\n  # you can see the behind the scenes sql\n  #show_query()\n\n#stop the tictoc timer\ntictoc::toc()\n\n6.52 sec elapsed\n\n# Save the data to disk --------------------------------------------------------\n\n# saving to Stata is convenient for working with coauthors\n# glue package allows for dynamic file paths \n# then each coauthor can specify their own local data folder\ntic()\nwrite_dta(raw_funda,glue(\"{data_path}/raw-data-R.dta\")) \ntoc()\n\n0.87 sec elapsed\n\n#looks like about 162 MB on my machine\n\n# if the data will stay in R or another advanced/modern language like Python\n# then Parquet files are a nice open-source file format for data science\n# they are fast and small and have some other advanced features as well\n\n# in this example, we have customized the write_parquet function a bit to \n# default to a high level of gzip compression to save space\n# therefore, the write_parquet function is using the function defined in the \n# utils script\ntic()\nwrite_parquet(raw_funda,glue(\"{data_path}/raw-data-R.parquet\"))\ntoc()\n\n1.89 sec elapsed\n\n# the parquet operations are faster and the file is only 32MB on my machine\n\nThen we play with transforming data. The R script below processes financial panel data by cleaning, transforming, and preparing it for analysis. It begins by loading necessary libraries and reading in raw data, applying filtering criteria to ensure data quality. Key financial variables are computed, including return on assets, R&D intensity, and industry classifications based on Fama-French groupings. To analyze earnings persistence, the script generates lead earnings variables while ensuring continuity in fiscal periods. Exploratory analysis is conducted to summarize industry-level characteristics and visualize loss frequencies. Winsorization is applied to key financial metrics to mitigate the influence of outliers. Finally, the processed dataset is saved in Stata format for further statistical modeling and analysis.\n\n# Setup ------------------------------------------------------------------------\n\n# Load Libraries [i.e., packages]\nlibrary(lubridate)\nlibrary(glue)\nlibrary(arrow)\nlibrary(haven)\nlibrary(tidyverse) # I like to load tidyverse last to avoid package conflicts\n\n\n\nsource(\"E:/acct_995_data/abr/-Global-Parameters.R\")\n\n✔ Setting active project to \"E:/z585y102/git/abr\".\n\n\n☐ Edit '.Renviron'.\n\n\n☐ Restart R for changes to take effect.\n\nsource(\"E:/acct_995_data/abr/utils.R\")\n\nset R formatting options\n\n\nimported parquet functions\n\n\nimported industry functions\n\n\nimported transformation functions\n\n# read in the data from the previous step --------------------------------------\n\n#let's work with the parquet version\n\ndata1 &lt;- read_parquet(glue(\"{data_path}/raw-data-R.parquet\"))\n\n\n#note: if you choose to collect your raw data in SAS or Stata\n# these could easily be read in using haven::read_dta() or haven::read_sas()\n\n\n# Some quick peeks at the data -------------------------------------------------\n\n#since the data is structured as a dplyr tibble, just calling its name\n#will preview the first 10 rows (similar to a head function)\ndata1 \n\n# A tibble: 303,170 × 25\n   conm  gvkey datadate   fyear   fyr cstat_cusip cik   cstat_ticker  sich    ib\n   &lt;chr&gt; &lt;chr&gt; &lt;date&gt;     &lt;int&gt; &lt;int&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;        &lt;int&gt; &lt;dbl&gt;\n 1 A & … 0010… 1968-12-31  1968    12 000032102   &lt;NA&gt;  AE.2            NA 0.347\n 2 A & … 0010… 1969-12-31  1969    12 000032102   &lt;NA&gt;  AE.2            NA 1.84 \n 3 A & … 0010… 1970-12-31  1970    12 000032102   &lt;NA&gt;  AE.2            NA 1.88 \n 4 A & … 0010… 1971-12-31  1971    12 000032102   &lt;NA&gt;  AE.2            NA 0.138\n 5 A & … 0010… 1972-12-31  1972    12 000032102   &lt;NA&gt;  AE.2            NA 1.55 \n 6 A & … 0010… 1973-12-31  1973    12 000032102   &lt;NA&gt;  AE.2            NA 1.86 \n 7 A & … 0010… 1974-12-31  1974    12 000032102   &lt;NA&gt;  AE.2            NA 1.56 \n 8 A & … 0010… 1975-12-31  1975    12 000032102   &lt;NA&gt;  AE.2            NA 2.28 \n 9 A & … 0010… 1976-12-31  1976    12 000032102   &lt;NA&gt;  AE.2            NA 3.43 \n10 A & … 0010… 1977-12-31  1977    12 000032102   &lt;NA&gt;  AE.2            NA 1.93 \n# ℹ 303,160 more rows\n# ℹ 15 more variables: spi &lt;dbl&gt;, at &lt;dbl&gt;, xrd &lt;dbl&gt;, ceq &lt;dbl&gt;, sale &lt;dbl&gt;,\n#   csho &lt;dbl&gt;, prcc_f &lt;dbl&gt;, sic &lt;chr&gt;, fic &lt;chr&gt;, gind &lt;chr&gt;, sic4 &lt;dbl&gt;,\n#   sic2 &lt;dbl&gt;, calyear &lt;dbl&gt;, mve &lt;dbl&gt;, e &lt;dbl&gt;\n\n#can also glimpse\nglimpse(data1)\n\nRows: 303,170\nColumns: 25\n$ conm         &lt;chr&gt; \"A & E PLASTIK PAK INC\", \"A & E PLASTIK PAK INC\", \"A & E …\n$ gvkey        &lt;chr&gt; \"001000\", \"001000\", \"001000\", \"001000\", \"001000\", \"001000…\n$ datadate     &lt;date&gt; 1968-12-31, 1969-12-31, 1970-12-31, 1971-12-31, 1972-12-…\n$ fyear        &lt;int&gt; 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 197…\n$ fyr          &lt;int&gt; 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1…\n$ cstat_cusip  &lt;chr&gt; \"000032102\", \"000032102\", \"000032102\", \"000032102\", \"0000…\n$ cik          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"0000723576\", \"00…\n$ cstat_ticker &lt;chr&gt; \"AE.2\", \"AE.2\", \"AE.2\", \"AE.2\", \"AE.2\", \"AE.2\", \"AE.2\", \"…\n$ sich         &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ ib           &lt;dbl&gt; 0.347, 1.835, 1.878, 0.138, 1.554, 1.863, 1.555, 2.284, 3…\n$ spi          &lt;dbl&gt; 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -0.580, 0.000, …\n$ at           &lt;dbl&gt; 5.922, 28.712, 33.450, 29.330, 19.907, 21.771, 25.638, 23…\n$ xrd          &lt;dbl&gt; 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0…\n$ ceq          &lt;dbl&gt; 2.571, 10.210, 10.544, 8.381, 7.021, 8.567, 9.843, 10.240…\n$ sale         &lt;dbl&gt; 7.400, 37.392, 45.335, 47.033, 34.362, 37.750, 50.325, 51…\n$ csho         &lt;dbl&gt; 0.372, 2.582, 2.446, 2.995, 2.902, 2.840, 2.150, 2.098, 2…\n$ prcc_f       &lt;dbl&gt; NA, NA, 10.000, 5.750, 5.125, 1.750, 2.125, 4.375, 5.750,…\n$ sic          &lt;chr&gt; \"3089\", \"3089\", \"3089\", \"3089\", \"3089\", \"3089\", \"3089\", \"…\n$ fic          &lt;chr&gt; \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"…\n$ gind         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"253010\", \"253010…\n$ sic4         &lt;dbl&gt; 3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089, 308…\n$ sic2         &lt;dbl&gt; 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 58, 58, 58, 58, 5…\n$ calyear      &lt;dbl&gt; 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 197…\n$ mve          &lt;dbl&gt; NA, NA, 24.460000, 17.221250, 14.872750, 4.970000, 4.5687…\n$ e            &lt;dbl&gt; 0.347, 1.835, 1.878, 0.138, 1.554, 1.863, 2.135, 2.284, 3…\n\n#or summarize\nsummary(data1)\n\n     conm              gvkey              datadate              fyear     \n Length:303170      Length:303170      Min.   :1968-06-30   Min.   :1968  \n Class :character   Class :character   1st Qu.:1984-10-31   1st Qu.:1984  \n Mode  :character   Mode  :character   Median :1996-01-31   Median :1995  \n                                       Mean   :1996-05-22   Mean   :1995  \n                                       3rd Qu.:2007-08-31   3rd Qu.:2007  \n                                       Max.   :2025-02-28   Max.   :2024  \n                                                                          \n      fyr         cstat_cusip            cik            cstat_ticker      \n Min.   : 1.000   Length:303170      Length:303170      Length:303170     \n 1st Qu.: 6.000   Class :character   Class :character   Class :character  \n Median :12.000   Mode  :character   Mode  :character   Mode  :character  \n Mean   : 9.473                                                           \n 3rd Qu.:12.000                                                           \n Max.   :12.000                                                           \n                                                                          \n      sich              ib                 spi                  at           \n Min.   : 100     Min.   :-56121.90   Min.   :-51066.20   Min.   :      0.0  \n 1st Qu.:2842     1st Qu.:    -2.09   1st Qu.:    -0.24   1st Qu.:     11.7  \n Median :3823     Median :     0.64   Median :     0.00   Median :     62.8  \n Mean   :4549     Mean   :    73.35   Mean   :   -15.53   Mean   :   1654.5  \n 3rd Qu.:5961     3rd Qu.:    10.72   3rd Qu.:     0.00   3rd Qu.:    396.5  \n Max.   :9998     Max.   :104821.00   Max.   :120517.00   Max.   :1153881.0  \n NA's   :106795   NA's   :18729                           NA's   :17546      \n      xrd                ceq                sale               csho         \n Min.   :   -0.65   Min.   :-86154.0   Min.   : -1965.0   Min.   :     0.0  \n 1st Qu.:    0.00   1st Qu.:     3.0   1st Qu.:     9.4   1st Qu.:     2.9  \n Median :    0.00   Median :    23.1   Median :    63.1   Median :     9.7  \n Mean   :   34.19   Mean   :   570.5   Mean   :  1386.8   Mean   :    73.2  \n 3rd Qu.:    2.13   3rd Qu.:   152.1   3rd Qu.:   406.7   3rd Qu.:    32.8  \n Max.   :88544.00   Max.   :649368.0   Max.   :680985.0   Max.   :500796.1  \n                    NA's   :18284      NA's   :18807      NA's   :21318     \n     prcc_f              sic                fic                gind          \n Min.   :     0.00   Length:303170      Length:303170      Length:303170     \n 1st Qu.:     2.39   Class :character   Class :character   Class :character  \n Median :     8.60   Mode  :character   Mode  :character   Mode  :character  \n Mean   :    23.44                                                           \n 3rd Qu.:    21.87                                                           \n Max.   :141600.00                                                           \n NA's   :62087                                                               \n      sic4           sic2          calyear          mve         \n Min.   : 100   Min.   : 1.00   Min.   :1969   Min.   :      0  \n 1st Qu.:2836   1st Qu.:28.00   1st Qu.:1985   1st Qu.:     13  \n Median :3714   Median :37.00   Median :1996   Median :     66  \n Mean   :4426   Mean   :43.82   Mean   :1996   Mean   :   2335  \n 3rd Qu.:5812   3rd Qu.:58.00   3rd Qu.:2008   3rd Qu.:    440  \n Max.   :9998   Max.   :99.00   Max.   :2025   Max.   :3522211  \n                                               NA's   :64800    \n       e            \n Min.   :-39656.00  \n 1st Qu.:    -1.39  \n Median :     0.86  \n Mean   :    89.91  \n 3rd Qu.:    13.00  \n Max.   :100834.00  \n NA's   :18729      \n\n# Manipulate a few variables ---------------------------------------------------\n\n#many of the below steps could be combined into one. They also could have been\n#done on the WRDS server\n#I just separate them for teaching purposes\n\ndata2 &lt;- data1 |&gt;\n  #filter based on the global parameters for the sample period that we set in\n  # the global-parameters script.\n  filter(calyear &gt;= beg_year,\n         calyear &lt;= end_year) |&gt; \n  #I am going to scale by total assets (at) so I am going to set a minimum at\n  # to avoid small denominators\n  filter(at &gt;= 10) |&gt; \n  mutate(\n    #use the FF utility functions to assign fama french industries\n    FF12 = assign_FF12(sic4),\n    ff12num = assign_FF12_num(sic4),\n    FF49 = assign_FF49(sic4),\n    ff49num = assign_FF49_num(sic4),\n    # code a loss dummy, I like 1/0 but true/false is also fine\n    loss = if_else(e &lt; 0 , 1, 0),\n    # scale e by ending total assets\n    # FSA purists would probably use average total assets, but just an example\n    roa = e / at ,\n    # scale r&d by ending total assets\n    rd = xrd / at\n  ) |&gt; \n  # let's do an earnings persistence regression with lead earnings as y\n  # so for each gvkey we need the next earnings for that gvkey\n  # first make sure the data is sorted properly\n  arrange(gvkey,datadate) |&gt; \n  # then group by firm (gvkey) \n  # this will restrict the lead function to only look at the next obs \n  # for the same firm\n  group_by(gvkey) |&gt; \n  mutate(roa_lead_1 = lead(roa,1L),\n         datadate_lead_1 = lead(datadate,1L)) |&gt; \n  #check to make sure no gaps or fiscal year changes\n  filter(month(datadate_lead_1) == month(datadate),\n         year(datadate_lead_1) == year(datadate) + 1) |&gt; \n  #not a bad idea to ungroup once you are finished\n  ungroup() |&gt; \n  #Filter multiple variables to require non-missing values\n  filter(if_all(c(at, mve,rd,ff12num,starts_with(\"roa\")), ~ !is.na(.x)))\n\n\n# Play around ------------------------------------------------------------------\n\n#how many observations in each FF12 industry?\ndata2 |&gt; \n  group_by(FF12) |&gt; \n  count()\n\n# A tibble: 10 × 2\n# Groups:   FF12 [10]\n   FF12                     n\n   &lt;chr&gt;                &lt;int&gt;\n 1 Business Equipment   30461\n 2 Chemicals             5303\n 3 Consumer Durables     6201\n 4 Consumer Nondurables 14146\n 5 Energy                8802\n 6 Healthcare           17835\n 7 Manufacturing        27260\n 8 Other                24743\n 9 Retail               23568\n10 Telecommunications    4979\n\n#percentage of losses by industry?\ndata2 |&gt; \n  group_by(FF12) |&gt; \n  summarize(pct_loss = sum(loss, na.rm = T)/n())\n\n# A tibble: 10 × 2\n   FF12                 pct_loss\n   &lt;chr&gt;                   &lt;dbl&gt;\n 1 Business Equipment      0.325\n 2 Chemicals               0.137\n 3 Consumer Durables       0.168\n 4 Consumer Nondurables    0.145\n 5 Energy                  0.326\n 6 Healthcare              0.516\n 7 Manufacturing           0.157\n 8 Other                   0.246\n 9 Retail                  0.164\n10 Telecommunications      0.378\n\n#as a quick figure?\ndata2 |&gt; \n  group_by(FF12) |&gt; \n  summarize(pct_loss = sum(loss, na.rm = T)/n()) |&gt; \n  ggplot(aes(x = FF12, y= pct_loss)) + \n  scale_y_continuous(name = \"Freq. of Losses\", labels = scales::percent) +\n  geom_col() +\n  coord_flip() +\n  theme_bw() \n\n\n\n\n\n\n\n# Winsorize the data -----------------------------------------------------------\n\n#check the tail values as an example\nquantile(data2$roa, probs = c(0,.01,.99,1))\n\n         0%          1%         99%        100% \n-39.6179784  -0.8033140   0.2430401   2.5709079 \n\n#default winsorization\ndata3 &lt;- data2 |&gt; \n  #default is 1% / 99 % , this winsorizes rd and all roa vars at that cut\n  mutate(across(c(mve,at,rd,starts_with(\"roa\")), winsorize_x))\n\n\n#check the winsorized tail values\nquantile(data3$roa, probs = c(0,.01,.99,1))\n\n        0%         1%        99%       100% \n-0.8033140 -0.8033083  0.2430382  0.2430401 \n\n#alternate version, if we want to change the tails\ndata3b &lt;- data2 |&gt; \n  #winsorize 2.5% / 97.5 % \n  mutate(\n    across(c(rd,starts_with(\"roa\")), ~ winsorize_x(.x,cuts = c(0.025,0.025)))\n  )\n\n#check\nquantile(data2$roa, probs = c(0,.025,.975,1))\n\n         0%        2.5%       97.5%        100% \n-39.6179784  -0.5113552   0.1891310   2.5709079 \n\nquantile(data3b$roa, probs = c(0,.025,.975,1))\n\n        0%       2.5%      97.5%       100% \n-0.5113552 -0.5113345  0.1891293  0.1891310 \n\n# Save the winsorized data  ----------------------------------------------------\n\n# just saving to Stata format this time for brevity\nwrite_dta(data3,glue(\"{data_path}/regdata-R.dta\"))\n\nThis is my first time working on a Quarto book. So, this first post will be very rough for now. I will try to provide a few different examples of ways to obtain and merge data in R, and a few tips of things to keep in mind.\nWe already know how to obtain data from WRDS. Let’s use this to obtain some returns for the S&P 500. We could use the formal index data, but let’s take a shortcut and just use the popular SPY ETF that tracks the S&P 500. To do this, we need to find the CRSP identifier (PERMNO) for the ticker “SPY.” We can look in the WRDS stocknames file for this, and then use the SPY PERMNO to pull data from the CRSP monthly stock file.\n\n# Load Libraries [i.e., packages]\nlibrary(dbplyr)\nlibrary(RPostgres)\nlibrary(DBI)\nlibrary(glue)\nlibrary(arrow)\nlibrary(haven)\nlibrary(tictoc) #very optional timer, mostly as a teaching example\nlibrary(tidyverse) # I like to load tidyverse last to avoid package conflicts\n\n#I have done this in a separate chunk with the options\n# results: FALSE \n# message: FALSE\n#because I don't need to see the messages from loading the packages. \n\n\n# Log in to WRDS -------------------------------------------------------------------\n\n#before running this block, I used these commands to securely store my WRDS username and password:\n# keyring::key_set(\"WRDS_user\")\n# keyring::key_set(\"WRDS_pw\")\n\nif(exists(\"wrds\")){\n  dbDisconnect(wrds)  # because otherwise WRDS might time out\n}\n\nwrds &lt;- dbConnect(Postgres(),\n                  host = 'wrds-pgdata.wharton.upenn.edu',\n                  port = 9737,\n                  user = keyring::key_get(\"WRDS_user\"),\n                  password = keyring::key_get(\"WRDS_pw\"),\n                  sslmode = 'require',\n                  dbname = 'wrds')\n\n\n# Create WRDS Table References -------------------------------------------------\ncrsp.msf &lt;- tbl(wrds,in_schema(\"crsp\",\"msf\"))\nstocknames &lt;- tbl(wrds,in_schema(\"crsp\",\"stocknames\"))\n\n#I am collecting this data locally to play with duplicates\nspy_permnos &lt;- stocknames |&gt; filter(ticker == \"SPY\") |&gt; collect() \n\nNotice that there are six observations in the stocknames table that all share the same ticker “SPY.” I am going to use this as a toy example to play with duplicates. My goal is for this data to be unique at the level of ticker-permno links. First, I can check whether this is true.\n\n#check whether there are duplicates \n#this simple logic is useful in general\n#group by the level I want to make unique,\n#count within each group\n#sort by descending count so that if there are duplicates\n#they will show up at the top. \nspy_permnos |&gt; \n  group_by(ticker,permno) |&gt; \n  count() |&gt; \n  arrange(-n)\n\n# A tibble: 3 × 3\n# Groups:   ticker, permno [3]\n  ticker permno     n\n  &lt;chr&gt;   &lt;int&gt; &lt;int&gt;\n1 SPY     84398     3\n2 SPY     33910     1\n3 SPY     60716     1\n\n\nThere are multiple permnos connected to the SPY ticker and some duplicate entries for permno 84398 so I better just look at the data. Also this tells me that there are only a few rows so it doesn’t hurt to just print the data.\n\n#| #note that we can use the kable commmand to embed a simple table in the quarto document\nknitr::kable(spy_permnos)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npermno\nnamedt\nnameenddt\nshrcd\nexchcd\nsiccd\nncusip\nticker\ncomnam\nshrcls\npermco\nhexcd\ncusip\nst_date\nend_date\nnamedum\n\n\n\n\n33910\n1962-07-02\n1966-05-24\n10\n2\n2893\n\nSPY\nSPEEDRY CHEMICAL PRODS INC\nA\n2751\n3\n55914210\n1962-07-02\n1979-01-22\n2\n\n\n60716\n1978-10-03\n1987-07-01\n10\n1\n3811\n84756710\nSPY\nSPECTRA PHYSICS INC\n\n4215\n1\n84756710\n1972-12-14\n1987-07-01\n2\n\n\n84398\n1993-01-29\n2009-02-23\n73\n2\n6726\n78462F10\nSPY\nSPDR TRUST\n\n46699\n4\n78462F10\n1993-01-29\n2024-12-31\n2\n\n\n84398\n2009-02-24\n2010-01-26\n73\n4\n6726\n78462F10\nSPY\nSPDR TRUST\n\n46699\n4\n78462F10\n1993-01-29\n2024-12-31\n2\n\n\n84398\n2010-01-27\n2024-12-31\n73\n4\n6726\n78462F10\nSPY\nSPDR S & P 500 E T F TRUST\n\n46699\n4\n78462F10\n1993-01-29\n2024-12-31\n2\n\n\n\n\n\nLooking at the data, the company name for permno 84398 matches the SPDR S&P 500 ETF I am looking for. It looks like the duplicate entries might have to do with a change in the listing exchange for the ETF (exchcd) and then a slight name change in 2010 to make the name of the trust more descriptive. Let’s keep using this toy example to demonstrate some other functions for dealing with duplicates:\n\n#if I want to just collapse the duplicates, I can use \"distinct\" across the groups that I care about\n\nspy_permnos |&gt; \n  select(ticker,permno) |&gt; \n  distinct()\n\n# A tibble: 3 × 2\n  ticker permno\n  &lt;chr&gt;   &lt;int&gt;\n1 SPY     33910\n2 SPY     60716\n3 SPY     84398\n\n\nNow there are only three observations,which is what I asked for, but sometimes it might matter which of the duplicate observations I keep. For example, perhaps what I should do is keep the most recent observation from the spy_permno dataset, in terms of nameenddt.\n\n#select the max data within each group as more advanced way to keep one obs per \n#group\nspy_permnos |&gt; \n  group_by(ticker,permno) |&gt;\n  filter(nameenddt==max(nameenddt))\n\n# A tibble: 3 × 16\n# Groups:   ticker, permno [3]\n  permno namedt     nameenddt  shrcd exchcd siccd ncusip   ticker comnam  shrcls\n   &lt;int&gt; &lt;date&gt;     &lt;date&gt;     &lt;int&gt;  &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; \n1  33910 1962-07-02 1966-05-24    10      2  2893 &lt;NA&gt;     SPY    SPEEDR… A     \n2  60716 1978-10-03 1987-07-01    10      1  3811 84756710 SPY    SPECTR… &lt;NA&gt;  \n3  84398 2010-01-27 2024-12-31    73      4  6726 78462F10 SPY    SPDR S… &lt;NA&gt;  \n# ℹ 6 more variables: permco &lt;int&gt;, hexcd &lt;int&gt;, cusip &lt;chr&gt;, st_date &lt;date&gt;,\n#   end_date &lt;date&gt;, namedum &lt;dbl&gt;\n\n#ultimately we can assign the permno of the current observation, which we already know from manually checking is the correct permno, 84398\n\nspy_permno &lt;- spy_permnos |&gt; \n  group_by(ticker,permno) |&gt;\n  filter(nameenddt==max(nameenddt)) |&gt; \n  ungroup() |&gt; \n  filter(nameenddt==max(nameenddt)) |&gt; \n  select(permno) |&gt; \n  as.numeric()\n\nspy_permno\n\n[1] 84398\n\n\nNow we can use the SPY permno to pull monthly returns for SPY:\n\n# Pull CRSP MSI Data -----------------------------------------------------------\n\n#Data seems to begin in feb 1993, lets start in 1995 as a nice round number\n#notice that this implicitly feeds the permno I calculated locally back up to WRDS in my crsp query. \nmkt_index &lt;- crsp.msf |&gt; \n  filter(date &gt;= \"1995-01-01\",\n         permno == spy_permno) |&gt; \n  select(date,ret,prc) |&gt; \n  collect() |&gt; \n  mutate(month = month(date),\n         year = year(date))\n\nThen I can plot them, note that if you look at the source code for this page, I do this in a chunk with echo=false so that I only see the output and not the code. This would be useful for creating an actual paper rather than coding examples:\n\n\n\n\n\n\n\n\n\nThis plot would look nice with recessions shaded. We can get recession dates from FRED. FRED data can be accessed from an API, there is a custom package to work with FRED data in R called fredr. First you need to obtain a FRED API key by signing up here: https://fred.stlouisfed.org/docs/api/api_key.html\n\n#load the fredr package\nlibrary(fredr)\n\n#Unblock the below and run to set your password\n#keyring::key_set(\"fred_api_key\")\n\n#set my API key which is saved in keyring\nfredr_set_key(keyring::key_get(\"fred_api_key\"))\n\n#collect the data from the series USRECD\n# https://fred.stlouisfed.org/series/USRECD\n\nfred_data&lt;-fredr(series_id = \"USRECD\",\n                 observation_start = as.Date(\"1995-01-01\"),\n                 observation_end = as.Date(\"2024-12-31\"),\n                 frequency = \"m\") |&gt; \n  #I am going to add month and year variables because I think this is \n  #easier for linking\n  mutate(month = month(date),\n         year = year(date))\n\n# show the first few rows which has a value of 0 or 1 where 1 is recession\nfred_data |&gt; head() |&gt; knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\ndate\nseries_id\nvalue\nrealtime_start\nrealtime_end\nmonth\nyear\n\n\n\n\n1995-01-01\nUSRECD\n0\n2025-04-02\n2025-04-02\n1\n1995\n\n\n1995-02-01\nUSRECD\n0\n2025-04-02\n2025-04-02\n2\n1995\n\n\n1995-03-01\nUSRECD\n0\n2025-04-02\n2025-04-02\n3\n1995\n\n\n1995-04-01\nUSRECD\n0\n2025-04-02\n2025-04-02\n4\n1995\n\n\n1995-05-01\nUSRECD\n0\n2025-04-02\n2025-04-02\n5\n1995\n\n\n1995-06-01\nUSRECD\n0\n2025-04-02\n2025-04-02\n6\n1995\n\n\n\n\n\nNow we need to merge the SPY data with the recession data.\n\nmerged_data &lt;- mkt_index |&gt;\n  #I am going to select only the columns I need from   #the FRED data\n  inner_join(fred_data |&gt; \n               select(month,year,recession=value),\n             by=join_by(month,year))\n\n# check to make sure it is still unique by month \nmerged_data |&gt; \n  group_by(month,year) |&gt; \n  count() |&gt; \n  arrange(-n)\n\n# A tibble: 360 × 3\n# Groups:   month, year [360]\n   month  year     n\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1  1995     1\n 2     1  1996     1\n 3     1  1997     1\n 4     1  1998     1\n 5     1  1999     1\n 6     1  2000     1\n 7     1  2001     1\n 8     1  2002     1\n 9     1  2003     1\n10     1  2004     1\n# ℹ 350 more rows\n\n\nNow we can make the plot with shades for recession months\n\n#turns out the merged data was not the preferred way to do this kind of plot\n\n\n\n\n#here is some code I found online to reshape the recession data and add it to the plot \n\n#rename/assign fred data to recession because \n#that was the name in the example I found \nrecession&lt;-fred_data\n\n#load a package they used\nlibrary(ecm)\n\n#reshape the recession data for the way \n#geom_rect likes the data shaped\nrecession$diff&lt;-recession$value-lagpad(recession$value,k=1)\n  recession&lt;-recession[!is.na(recession$diff),]\n  recession.start&lt;-recession[recession$diff==1,]$date\n  recession.end&lt;-recession[recession$diff==(-1),]$date\n  \n  if(length(recession.start)&gt;length(recession.end))\n  {recession.end&lt;-c(recession.end,Sys.Date())}\n  if(length(recession.end)&gt;length(recession.start))\n  {recession.start&lt;-c(min(recession$date),recession.start)}\n  \n  recs&lt;-as.data.frame(cbind(recession.start,recession.end))\n  recs$recession.start&lt;-as.Date(as.numeric(recs$recession.start),origin=as.Date(\"1970-01-01\"))\n  recs$recession.end&lt;-as.Date(recs$recession.end,origin=as.Date(\"1970-01-01\"))\n\n#look at the reshaped data\nrecs \n\n  recession.start recession.end\n1      2001-04-01    2001-12-01\n2      2008-01-01    2009-07-01\n3      2020-03-01    2020-05-01\n\n#plot the new plot with recession bars\nmerged_data |&gt; \n  ggplot(aes(x=date,y=abs(prc))) + \n  geom_line() +\n  scale_x_date(name = \"Date\",\n               date_breaks= \"5 years\",\n               date_labels = \"%Y\") +\n  scale_y_continuous(name = \"SPY Closing Price\") +\n  geom_rect(data=recs, inherit.aes=F, \n                         aes(xmin=recession.start, xmax=recession.end, ymin=-Inf, ymax=+Inf), \n                fill=\"darkgrey\", alpha=0.5)+\n  theme_bw()\n\n\n\n\n\n\n\n\nSome other useful materials:\nhttps://cran.r-project.org/web/packages/fredr/vignettes/fredr.html\nhttps://iangow.github.io/far_book/web-data.html\nhttps://iangow.github.io/far_book/identifiers.html",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Obtaining and Merging Data</span>"
    ]
  },
  {
    "objectID": "merge-data.html",
    "href": "merge-data.html",
    "title": "5  Merging Data",
    "section": "",
    "text": "5.1 Common Sources of Firm-Level Data\nBelow is a table of common sources of firm-level and firm identifiers that allow researchers to link data from different data sources:\nThere are other great resources for linking databases. These cover how to best merge data sources such as CRSP and Compustat.\nhttps://iangow.github.io/far_book/web-data.html\nhttps://iangow.github.io/far_book/identifiers.html\nhttps://www.tidy-finance.org/r/wrds-crsp-and-compustat.html",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Merging Data</span>"
    ]
  },
  {
    "objectID": "merge-data.html#common-sources-of-firm-level-data",
    "href": "merge-data.html#common-sources-of-firm-level-data",
    "title": "5  Merging Data",
    "section": "",
    "text": "Data Source\nPrimary Identifiers\nOther Firm Identifiers\nCan Be Linked To\nNotes\n\n\n\n\nCompustat\nGVKEY\nTic, CIK, CUSIP\nCRSP, Audit Analytics, I/B/E/S, TAQ, RavenPack, XBRL, TRACE, Mergent\nTo link to CRSP data, researchers should use the CRSP-Compustat link file for the GVKEY-PERMNO mapping.\n\n\nCRSP\nPERMNO\nTicker, CUSIP\nCompustat, IBES, TAQ\nTo link to Compustat data, researchers should use the CRSP-Compustat link file for PERMNO-GVKEY mapping.\n\n\nI/B/E/S\nTICKER\nOFTIC, CUSIP\nCRSP, TAQ\nThe “TICKER” variable is the I/B/E/S firm identifier not the trading symbol. The trading symbol is the “OFTIC” variable.\n\n\nTAQ\nSYMBOL\nCUSIP\nCompustat, CRSP, I/B/E/S\nResearchers should use the TAQ “master” dataset to create SYMBOL-CUSIP mapping.\n\n\nTRACE\nCUSIP\n\nCompustat, CRSP, I/B/E/S\n\n\n\nMergent FISD\nISSUER_ID\nCUSIP\nCompustat, CRSP, I/B/E/S\n\n\n\nAudit Analytics\nCOMPANY_FKEY\n\nCompustat, XBRL\nCOMPANY_FKEY is Audit Analytic’s name for CIK.\n\n\nXBRL\nCIK\n\nCompustat, Audit Analytics\n\n\n\nRavenPack\nRP_ENTITY_ID\nCUSIP, Ticker\nCompustat, CRSP, I/B/E/S, TAQ\nResearchers should use the “entity mapping file” provided by RavenPack to get CUSIP-RP_ENTITY_ID mapping.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Merging Data</span>"
    ]
  },
  {
    "objectID": "merge-data.html#common-sources-of-time-series-data",
    "href": "merge-data.html#common-sources-of-time-series-data",
    "title": "5  Merging Data",
    "section": "5.2 Common Sources of Time-Series Data",
    "text": "5.2 Common Sources of Time-Series Data\nSometimes we are interested in variables that are not specific to a particular company, such as asset pricing factors or macroeconomic data. Merging in time-series data from different sources is often easier than firm-level data above because the linking variable between data sources is a point in time variable (e.g., date of the observation). Below are common sources and how to access the data.\n\n\n\nData Source\nDescription\nNotes\n\n\n\n\nFRED\nThe Federal Reserve Economic Data (FRED) has time series data of many macroeconomic variables such as GDP, inflation, unemployment, interest rates, sentiment data.\nYou can visit the FRED website and search for the data series you are interested in here: https://fred.stlouisfed.org/\n\n\nKen French’s Website\nKen French’s website provides researcher with datasets on asset pricing factors as well as various portfolio returns.\nYou can find Ken French’s available datasets here: https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html\n\n\nJeffrey Wurgler’s Website\nJeffrey Wurgler’s website provides researcher with datasets on investor sentiment indices.\nYou can find Jeffrey Wurgler’s available datasets here: https://pages.stern.nyu.edu/~jwurgler/\n\n\n\nYou can also find more information about collecting FRED data in R using the “fredr” package: https://cran.r-project.org/web/packages/fredr/vignettes/fredr.html",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Merging Data</span>"
    ]
  },
  {
    "objectID": "merge-data.html#example-merge-in-internal-control-data-from-audit-analytics",
    "href": "merge-data.html#example-merge-in-internal-control-data-from-audit-analytics",
    "title": "5  Merging Data",
    "section": "5.3 Example: Merge in Internal Control Data from Audit Analytics",
    "text": "5.3 Example: Merge in Internal Control Data from Audit Analytics\nSo far in our example project, we are exploring the persistence of firm’s earnings. Our main hypothesis is that earnings are less persistent for loss firms than profitable firms. Perhaps, we also think this persistence could be moderated by the quality of the internal controls. For instance, internal controls are processes intended to provide assurance about the three major objectives: operations, reporting and compliance. Insufficient controls could lead to ineffective and inefficient operations and ultimately lower profitability. To test this, let’s grab data that could be useful indicators of poor financial reporting quality from Audit Analytics. We will access this data via WRDS or you can download CSV datasets from Audit Analytics and import into R.\n\n# Download Audit Analytics Data -------------------------------------------------\n#Let's grab restatement and internal control data from WRDS. We only need to run this once and save the data locally to use in the future. If we wanted to update for the latest available version, we can uncomment the below to recollect the data and save it down.\n#audit.res &lt;- tbl(wrds,in_schema(\"audit_audit_comp\",\"feed39_financial_restatements\")) |&gt; collect()\n#audit.302 &lt;- tbl(wrds,in_schema(\"audit_audit_comp\",\"feed10_sox_302_disclosure_contro\")) |&gt; collect()\n#audit.404 &lt;- tbl(wrds,in_schema(\"audit_audit_comp\",\"feed11_sox_404_internal_controls\")) |&gt; collect()\n\n#write_parquet(audit.res,glue(\"{data_path}/audit_restate.parquet\"))\n#write_parquet(audit.302,glue(\"{data_path}/audit_302.parquet\"))\n#write_parquet(audit.404,glue(\"{data_path}/audit_404.parquet\"))\n\n\n#Load internal control data and financial statement data we collected earlier\nfs_data &lt;- read_parquet(glue(\"{data_path}/raw-data-R.parquet\"))\nic_data &lt;- read_parquet(glue(\"{data_path}/audit_404.parquet\"))\n\nNow that we have downloaded the data let’s inspect the new internal control data to get a sense of the firm identifiers that we can use to link internal control data to our financial statement data. Without viewing the internal control data, we can see it has 240 variables (columns). Typically, the primary key(s) of the table will be the first few columns, so let’s peek at the dataframe.\n\n#We can look at the first few rows using head() which will look like a mini-dataframe\nic_data |&gt; head()\n\n# A tibble: 6 × 240\n  is_nth_restate ic_op_fkey ic_op_type auditor_fkey auditor_agrees\n           &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;          &lt;dbl&gt;\n1              0      19322 a                     6              1\n2              0      19323 m                     6              0\n3              0      29580 a                     6              2\n4              0      29581 m                     6              0\n5              0      28884 a                  1687              2\n6              0      45178 a                     6              2\n# ℹ 235 more variables: combined_ic_op &lt;dbl&gt;, ic_is_effective &lt;chr&gt;,\n#   fye_ic_op &lt;date&gt;, sig_date_ic_op &lt;date&gt;, aud_city &lt;chr&gt;, aud_state &lt;chr&gt;,\n#   aud_state_name &lt;chr&gt;, aud_state_reg &lt;chr&gt;, count_weak &lt;dbl&gt;,\n#   op_aud_name &lt;chr&gt;, op_aud_pcoab &lt;dbl&gt;, audit_fees &lt;dbl&gt;,\n#   non_audit_fees &lt;dbl&gt;, benefits_fees &lt;dbl&gt;, it_fees &lt;dbl&gt;, tax_fees &lt;dbl&gt;,\n#   audit_related_fees &lt;dbl&gt;, other_fees &lt;dbl&gt;, total_fees &lt;dbl&gt;,\n#   currency_code_fkey &lt;chr&gt;, restatement &lt;dbl&gt;, noteff_acc_rule &lt;dbl&gt;, …\n\n#We can also use glimpse() to see every column name as a row with corresponding data type and first few data poitns in that column. I will leave it commented out for space purposes.\n#glimpse(ic_data)\n\nAfter running the above, we see the second column is called “ic_op_fkey” which is the primary key for this table. In other words, each internal control opinion will have a unique value for this field and should correspond to one row/observations in the data. Let’s verify by ensuring there are no duplicate internal control opinion keys. There are a several ways to do this. Examine the code below to confirm there are no duplicate restatement keys.\n\n#(1) We can select the column(s) we think make up the primary key for this table and use the command unique() followed by a count() command to see how many rows this returns. We can compare to the original dataframe to see if they are the same. \nic_data |&gt; select(ic_op_fkey) |&gt; unique() |&gt; count()\n\n# A tibble: 1 × 1\n       n\n   &lt;int&gt;\n1 228376\n\n#The above returns 228,376 which matches the number of observations in our original data set.\n\n#(2) We can group by the primary key(s) and count the number of observations by that grouping to see if there are any with more than one observation. It is good practice to set output of this into a separate dataframe which we are going to call \"dups.\" If there are no duplicate observations this data set should be empty indicating the internal control opinion key is the primary key. \ndups &lt;- ic_data |&gt; group_by(ic_op_fkey) |&gt; summarise(obs = n()) |&gt; filter(obs&gt;1)\n\ncount(dups)\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1     0\n\n\nWe next will look at how the internal control data is organized to understand how we can link this into our financial statement data. Our financial statement data is organized as a panel data with annual financial statement variables for each firm for each period beginning as early as 1968. However, our internal control data begins in the early 2000’s. Often times the internal control data could have two observations per year because one opinion comes from management and the other comes the external auditor. To visualize, let’s look at Lockheed Martin Corporation in both datasets. Below, we see in our financial statement data Lockheed Martin appears once per year starting in 1968 with the “datadate” variable representing the end date of each fiscal year’s financial statements. In our internal control data, Lockheed Martin began reporting on internal controls post-SOX which was effective starting in 2004 for this firm. Scanning the internal control data, we see two things: (1) there are two observations for each fiscal year with the type “m” and “a” corresponding to the “management” and “auditor” opinion, respectively, and (2) Lockheed Martin did not have effective internal controls for the fiscal year-ended 12-31-2016.\n\n#Looking at Lockheed Martin in our financial statement data\nfs_data |&gt; filter(cstat_ticker==\"LMT\") |&gt; select(cstat_ticker,conm,cik,datadate)\n\n# A tibble: 57 × 4\n   cstat_ticker conm                 cik        datadate  \n   &lt;chr&gt;        &lt;chr&gt;                &lt;chr&gt;      &lt;date&gt;    \n 1 LMT          LOCKHEED MARTIN CORP 0000936468 1968-12-31\n 2 LMT          LOCKHEED MARTIN CORP 0000936468 1969-12-31\n 3 LMT          LOCKHEED MARTIN CORP 0000936468 1970-12-31\n 4 LMT          LOCKHEED MARTIN CORP 0000936468 1971-12-31\n 5 LMT          LOCKHEED MARTIN CORP 0000936468 1972-12-31\n 6 LMT          LOCKHEED MARTIN CORP 0000936468 1973-12-31\n 7 LMT          LOCKHEED MARTIN CORP 0000936468 1974-12-31\n 8 LMT          LOCKHEED MARTIN CORP 0000936468 1975-12-31\n 9 LMT          LOCKHEED MARTIN CORP 0000936468 1976-12-31\n10 LMT          LOCKHEED MARTIN CORP 0000936468 1977-12-31\n# ℹ 47 more rows\n\n#Looking at Lockheed Martin internal control opinions. Notice the two observations per year and the ineffective control opinion in 2016.\nic_data |&gt; filter(company_fkey==\"0000936468\") |&gt; select(ic_op_fkey,ic_op_type,form_fkey,fye_ic_op,fy_ic_op,ic_is_effective) |&gt;\n  filter(fy_ic_op&gt;2013) |&gt; arrange(fye_ic_op)\n\n# A tibble: 23 × 6\n   ic_op_fkey ic_op_type form_fkey fye_ic_op  fy_ic_op ic_is_effective\n        &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;date&gt;        &lt;dbl&gt; &lt;chr&gt;          \n 1     120544 a          10-K      2014-12-31     2014 Y              \n 2     120545 m          10-K      2014-12-31     2014 Y              \n 3     134259 a          10-K      2015-12-31     2015 Y              \n 4     134260 m          10-K      2015-12-31     2015 Y              \n 5     144163 a          10-K      2016-12-31     2016 N              \n 6     144164 m          10-K      2016-12-31     2016 N              \n 7     155293 a          10-K      2017-12-31     2017 Y              \n 8     155294 m          10-K      2017-12-31     2017 Y              \n 9     156088 a          10-K/A    2017-12-31     2017 Y              \n10     166277 a          10-K      2018-12-31     2018 Y              \n# ℹ 13 more rows\n\n\nFor our question, we haven’t made any predictions about whether it matters which party deems internal controls ineffective, so let’s collapse the data down to get one observation for each firm-fiscal year to match our financial statement data.\n\n#Summarizing data to be at the firm (\"company_fkey\") and fiscal year level (\"fy_ic_op\"). Also keeping \"fye_ic_op\" which will be date of fiscal year end that we will use to match to financial statement data and creating an indicator variable whether there was control issue discovered for that year for any opinion.\nic_data2 &lt;- ic_data |&gt; group_by(company_fkey,fye_ic_op,fy_ic_op) |&gt; \n  summarise(ic_issue = if_else(any(ic_is_effective == \"N\"), 1, 0),.groups = \"keep\") |&gt; \n  ungroup()\n\n#We are expecting this to be one observation for each firm each year - let's check\ndups &lt;- ic_data2 |&gt; group_by(company_fkey,fye_ic_op,fy_ic_op) |&gt; summarise(obs = n()) |&gt; filter(obs &gt; 1) #this data frame is empty so seems to have worked\n\n`summarise()` has grouped output by 'company_fkey', 'fye_ic_op'. You can\noverride using the `.groups` argument.\n\n#First, let's examine our Lockheed Martin example - yep 2016 is flagged\nic_data2 |&gt; filter(company_fkey==\"0000936468\") |&gt; filter(fy_ic_op&gt;2010)\n\n# A tibble: 14 × 4\n   company_fkey fye_ic_op  fy_ic_op ic_issue\n   &lt;chr&gt;        &lt;date&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 0000936468   2011-12-31     2011        0\n 2 0000936468   2012-12-31     2012        0\n 3 0000936468   2013-12-31     2013        0\n 4 0000936468   2014-12-31     2014        0\n 5 0000936468   2015-12-31     2015        0\n 6 0000936468   2016-12-31     2016        1\n 7 0000936468   2017-12-31     2017        0\n 8 0000936468   2018-12-31     2018        0\n 9 0000936468   2019-12-31     2019        0\n10 0000936468   2020-12-31     2020        0\n11 0000936468   2021-12-31     2021        0\n12 0000936468   2022-12-31     2022        0\n13 0000936468   2023-12-31     2023        0\n14 0000936468   2024-12-31     2024        0\n\n#Second, visually inspect the data by opening ic_data2 to confirm things look good. Confirmed another one below.\n#test &lt;- ic_data |&gt; filter(company_fkey==\"0001640251\")\n#test2 &lt;- ic_data2 |&gt; filter(company_fkey==\"0001640251\")\n\nNow that we have prepared our internal control data, we can link it to our financial statement data. Using the linking table above, we see we can link Compustat financial statement data to Audit Analytic data on CIKs which stands for Central Index Key and is assigned by the SEC. In our financial statement data this variable is “cik” and in our internal control data this is “company_fkey.” We will also match on fiscal year end date of the financial statements. In Compustat this variable is “datadate” and in our internal control data this is “fye_ic_op.”\n\n#Let's left join the internal control data to our financial statement data because the financial statement data goes back all the way to 1968 and our control data starts in the early 2000s. We don't need to throw out the prior years.\n\nfs_data2 &lt;- fs_data |&gt; \n  left_join(ic_data2,by=c(\"cik\"=\"company_fkey\",\"fyear\" = \"fy_ic_op\"))\n\n#Now let's look at only those periods I think should have matched a control opinion and see how many unmatched ones there were. Because I did a left join, the financial statement will have an \"N/A\" value if unmatched for our ic_issue variable. In the below, it looks like 20% per year were unmatched which is not small. We have a judgement call of whether to investigate more or leave the observations as N/A which will drop from our sample.\nfs_data2 |&gt; filter(fyear&gt;2006) |&gt; mutate(missing = if_else(is.na(ic_issue),1,0)) |&gt; group_by(fyear) |&gt; summarise(missing = sum(missing)/n())\n\n# A tibble: 18 × 2\n   fyear missing\n   &lt;dbl&gt;   &lt;dbl&gt;\n 1  2007  0.300 \n 2  2008  0.181 \n 3  2009  0.192 \n 4  2010  0.203 \n 5  2011  0.212 \n 6  2012  0.217 \n 7  2013  0.221 \n 8  2014  0.202 \n 9  2015  0.196 \n10  2016  0.194 \n11  2017  0.193 \n12  2018  0.203 \n13  2019  0.229 \n14  2020  0.220 \n15  2021  0.162 \n16  2022  0.0955\n17  2023  0.0740\n18  2024  0.459 \n\n#Check duplicates. It is always a good idea to check duplicates after merging.\ndups &lt;-  fs_data2 |&gt; group_by(gvkey,datadate) |&gt; summarise(obs = n()) |&gt; filter(obs&gt;1)\n\n`summarise()` has grouped output by 'gvkey'. You can override using the\n`.groups` argument.\n\n#We had 164 pairs of dups, so let's examine a couple and see if we can figure out why\ntest &lt;- fs_data2 |&gt; filter(gvkey==\"001722\")\ntest &lt;- fs_data2 |&gt; filter(gvkey==\"063026\")\n\n#Looks like some have two opinions with the two different fiscal year end dates but same fiscal year. There are only 164 pairs, so we could drop them all together. However, let's see if for these cases it helps to keep the one with fiscal year end date matching the datadate. \nfs_data2 &lt;- fs_data |&gt; \n  left_join(ic_data2,by=c(\"cik\"=\"company_fkey\",\"fyear\" = \"fy_ic_op\")) |&gt; \n  #Going to filter out those with wrong fiscal year end\n  group_by(gvkey,datadate) |&gt; \n  #First keep those that matched fine with no dups, then keep those with matching fiscal year    ends, and assign \"drop\" to the others\n  mutate( keep_drop = case_when(n() == 1 ~ \"keep\",datadate == fye_ic_op ~ \"keep\",TRUE ~ \"drop\")) |&gt; \n  ungroup() |&gt; \n  filter(keep_drop==\"keep\")\n\n#Now recheck duplicates. This time there are none.\ndups &lt;-  fs_data2 |&gt; group_by(gvkey,datadate) |&gt; summarise(obs = n()) |&gt; filter(obs&gt;1)\n\n`summarise()` has grouped output by 'gvkey'. You can override using the\n`.groups` argument.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Merging Data</span>"
    ]
  },
  {
    "objectID": "merge-data.html#example-merge-in-michigan-consumer-sentiment-data-from-fred",
    "href": "merge-data.html#example-merge-in-michigan-consumer-sentiment-data-from-fred",
    "title": "5  Merging Data",
    "section": "5.4 Example: Merge in Michigan Consumer Sentiment Data from FRED",
    "text": "5.4 Example: Merge in Michigan Consumer Sentiment Data from FRED\nWe could also link in macroeconomic data we think could moderate the persistence of firm profitability. Perhaps we think the aggregate consumer sentiment moderate how persistent earnings are for all firms across different time periods. We can practice merging in time-series data by accessing the consumer sentiment data from the University of Michigan Surveys of Consumers via FRED.\n\n#load the fredr package\nlibrary(fredr)\n\n#Unblock the below and run to set your password\n#keyring::key_set(\"fred_api_key\")\n\n#set my API key which is saved in keyring\nfredr_set_key(keyring::key_get(\"fred_api_key\"))\n\n#collect the data from the series UMCSENT\n# https://fred.stlouisfed.org/series/UMCSENT\n\nfred_data&lt;-fredr(series_id = \"UMCSENT\",\n                 frequency = \"m\") |&gt; \n  #I am going to add month and year variables because I think this is \n  #easier for linking\n  mutate(month = month(date),\n         year = year(date))\n\nSome companies don’t have a fiscal year end that matches a calendar year end (e.g. Apple Inc.). However, we want to create the average value of the consumer sentiment index over the same calendar time between a company’s fiscal year end.\n\n#Let's first create two variable that capture the prior fiscal year end \nfs_data3 &lt;- fs_data2 |&gt; \n  #We could do just 12 months before the datadate variable\n  mutate(datadate_m12 = datadate %m-% months(12)) |&gt; \n  #Or we could find the actual prior datadate\n  #This will have missing observations for the first observation since there is no prior obs\n  #Additionally if a firm changes their fiscal year end it will create different number of       months in which we measure sentiment\n  arrange(gvkey, datadate) |&gt; \n  group_by(gvkey) |&gt; \n  mutate(lag_datadate = lag(datadate)) |&gt; \n  ungroup()\n\n#Below displays the number of times we match using both methods, N/As due to first obs, and number of observations where there was a change in fiscal year end\nfs_data3 |&gt; mutate(match = if_else(datadate_m12==lag_datadate,1,0)) |&gt; \n  group_by(match) |&gt; summarise(obs = n())\n\n# A tibble: 3 × 2\n  match    obs\n  &lt;dbl&gt;  &lt;int&gt;\n1     0   4682\n2     1 274779\n3    NA  23698\n\n#Let's use the minus 12 month approach and create a dataset that merges in sentiment between those two dates\nfs_monthly &lt;- fs_data3 |&gt; \n  #use just the firm and datadates for this\n  select(gvkey, datadate, datadate_m12) |&gt; \n  #Now identify the months between my two datadates\n  mutate(month_range = map2(datadate_m12, datadate, ~ seq.Date(floor_date(.x, \"month\"),   floor_date(.y, \"month\"), by = \"month\"))) |&gt; \n  #Make into rows\n  unnest(cols = c(month_range))\n\n#Now merge in sentiment data\nsent &lt;- fs_monthly |&gt; \n  left_join(fred_data,by=c(\"month_range\"=\"date\"))\n\n#Now we will group by gvkey and datadate to calculate the average consumer sentiment during the fiscal year\nsent2 &lt;- sent |&gt; \n  group_by(gvkey,datadate) |&gt; \n  summarise(avg_cons_sent = mean(value))\n\n`summarise()` has grouped output by 'gvkey'. You can override using the\n`.groups` argument.\n\n#Let's merge that into our example data\nfs_data4 &lt;- fs_data3 |&gt; \n  left_join(sent2,by=c(\"gvkey\",\"datadate\"))\n\n#Number of missing monthly sentiment values over years - good after 1979\nfs_data4 |&gt; mutate(missing_sent = if_else(is.na(avg_cons_sent),1,0)) |&gt; group_by(year(datadate)) |&gt; summarise(missing = sum(missing_sent) )\n\n# A tibble: 58 × 2\n   `year(datadate)` missing\n              &lt;dbl&gt;   &lt;dbl&gt;\n 1             1968    2593\n 2             1969    3280\n 3             1970    3331\n 4             1971    3385\n 5             1972    3492\n 6             1973    3684\n 7             1974    5108\n 8             1975    5279\n 9             1976    5268\n10             1977    5233\n# ℹ 48 more rows\n\n\nFinally, we will save down this dataset which we will use in our analysis chapter.\n\nwrite_parquet(fs_data4,glue(\"{data_path}/merged_data.parquet\"))",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Merging Data</span>"
    ]
  },
  {
    "objectID": "visualizations.html",
    "href": "visualizations.html",
    "title": "6  Visualization",
    "section": "",
    "text": "Exploratory Data Analysis(EDA) is a critical step in any data analysis workflow. After collecting and cleaning our WRDS dataset—focusing on public firms and removing outliers—we now explore key financial patterns. In this chapter, we:\nVisualize industry-specific financial losses\nExplore firm size and loss trends over time\nExamine variable relationships via a correlation matrix\nEvaluate earnings persistence using yearly regressions\nWe use high-quality, publication-ready graphics (PDF) and presentation-ready graphics (PNG) with R packages like ggplot2, corrplot, and modelsummary.\nTo learn more about the R packages used in this chapter, see the following tutorials:\nggplot – for creating elegant data visualizations\ncorrplot – for visualizing correlation matrices\nmodelsummary – for formatting regression tables and model outputs\nWe work with a cleaned and winsorized version of firm-level financial data. The key variables include:\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\ngvkey\nFirm identifier\n\n\ndatadate\nDate of observation\n\n\ncalyear\nCalendar year\n\n\nroa\nReturn on Assets\n\n\nroa_lead_1\nReturn on Assets in next year\n\n\nloss\nDummy: 1 if firm has a financial loss\n\n\nat\nTotal assets\n\n\nmve\nMarket value of equity\n\n\nrd\nR&D spending scaled by assets\n\n\nFF12\nIndustry name based on Fama-French 12 classification\n\n\nff12num\nIndustry code (numeric)\n\n\n\n###6.2 Visualizing Losses by Industry Objective: Identify which industries are more prone to reporting losses, using FF12 categories.\nPlot: Horizontal bar chart of % of firms with loss == 1 per FF12 category.\nInterpretation: This figure reveals financial vulnerability patterns. For instance, tech or healthcare might have higher losses due to R&D intensity, while utilities may show fewer.\n\n#| label: setup-path\n#| echo: false\n#| results: 'hide'\n#| message: false\n#| warning: false\ndata_path &lt;- \"E:/acct_995_data/abr\"\n\n\n#| label: fig-losses-by-industry\n#| fig-cap: \"Proportion of Loss-Making Firms by Fama-French 12 Industry\"\n#| echo: false\n#| message: false\n#| warning: false\n\n\nfig &lt;- regdata |&gt; \n  group_by(FF12) |&gt; \n  summarize(pct_loss = sum(loss, na.rm = T)/n()) |&gt; \n  #Next line reorders the FF12 industries to make them appear in order of %loss\n  mutate(FF12 = forcats::fct_reorder(factor(FF12), (pct_loss))) |&gt; \n  ggplot(aes(x = FF12, y= pct_loss)) + \n  geom_col(fill = \"#0051ba\") +\n  # Fill color = Kansas Blue from : https://brand.ku.edu/guidelines/design/color\n  scale_y_continuous(name = \"Freq. of Losses\", labels = scales::percent) +\n  scale_x_discrete(name = \"Fama-French Industry\") +\n  coord_flip() +\n  #base_family = serif sets font to times new roman\n  theme_bw(base_family = \"serif\") \n\n#Look at it in R  \nfig\n\n\n\n\n\n\n\n#For Latex output you might want to output to PDF\nggsave(glue(\"{data_path}/output/ff12_fig.pdf\"), fig, width = 7, height = 6)\n\n#For Word output you might want to output to an image such as .png\nggsave(glue(\"{data_path}/output/ff12_fig.png\"), fig, width = 4.2, height = 3.6)\n\n###6.3 Losses by Firm Size Over Time Objective: Compare financial stability across firms of different sizes over the years.\nPlot: Line chart of pct_loss over time, stratified by market value quintiles.\nInterpretation: Smaller firms often exhibit higher volatility and more losses. This dynamic changes across economic cycles\n\n#| label: fig-losses-by-size\n#| fig-cap: \"Proportion of Loss-Making Firms by Size Quintile Over Time\"\n#| echo: false\n#| message: false\n#| warning: false\n\nfig &lt;- regdata |&gt; \n  group_by(calyear) |&gt; \n  #create size quintiles by calyear\n  mutate(size_qnt = factor(ntile(mve,5))) |&gt; \n  group_by(calyear, size_qnt) |&gt; \n  summarize(pct_loss = sum(loss, na.rm = T)/n()) |&gt; \n  ggplot(aes(x = calyear, y= pct_loss, color = size_qnt, linetype = size_qnt)) + \n  geom_line() + geom_point() + \n  scale_y_continuous(name = \"Freq. of Losses\", labels = scales::percent) +\n  scale_x_continuous(name = \"Year\", breaks = seq(1970,2025,5)) +\n  #If you give these scales the same name they will appear in the same legend\n  scale_color_discrete(name = \"Size Quintile\") +\n  scale_linetype_discrete(name = \"Size Quintile\") +\n  theme_bw(base_family = \"serif\") \n\n`summarise()` has grouped output by 'calyear'. You can override using the\n`.groups` argument.\n\n#Look at it in R  \nfig\n\n\n\n\n\n\n\n#For Latex\nggsave(glue(\"{data_path}/output/size_year.pdf\"), fig, width = 7, height = 6)\n\n#For Word\nggsave(glue(\"{data_path}/output/size_year.png\"), fig, width = 7, height = 6)\n\n###6.4 Correlation Matrix Objective: Understand relationships between core financial variables and detect multicollinearity.\nPlot: Heatmap-style correlation matrix (with coefficient values) for ROA, LOSS, R&D, etc.\nInterpretation: Strong correlation between roa and roa_lead_1 shows earnings persistence. Weak correlation between rd and roa may suggest R&D’s delayed or indirect impact.\n\n#| label: fig-correlation-matrix\n#| fig-cap: \"Correlation Matrix of Key Financial Variables\"\n#| echo: false\n#| message: false\n#| warning: false\n\n\nlibrary(corrplot)\n\n\ncorrdata &lt;- regdata |&gt; \n  select(`ROA_{t+1}` = roa_lead_1,\n         `ROA_t` = roa, \n         `LOSS` = loss,\n         `R\\\\&D` = rd,\n         `TA` = at,\n         `SIZE` = mve)\n\ncorrdata\n\n# A tibble: 163,298 × 6\n   `ROA_{t+1}`   ROA_t  LOSS `R\\\\&D`    TA  SIZE\n         &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     0.00471 0.0561      0       0  33.4 24.5 \n 2     0.0781  0.00471     0       0  29.3 17.2 \n 3     0.0856  0.0781      0       0  19.9 14.9 \n 4     0.0833  0.0856      0       0  21.8  4.97\n 5     0.0955  0.0833      0       0  25.6  4.57\n 6     0.0890  0.0955      0       0  23.9  9.18\n 7     0.0231  0.0890      0       0  38.6 12.7 \n 8     0.0700  0.0806      0       0  14.1 25.9 \n 9     0.0503  0.0700      0       0  16.3 13.4 \n10     0.0657  0.0355      0       0  13.7  3.51\n# ℹ 163,288 more rows\n\ncorrelation = cor(corrdata)\ncol2 = colorRampPalette(c('red', 'white', 'blue'))  \n\npdf(file=glue(\"{data_path}/output/corr_fig.pdf\"))\ncorrplot(correlation, method = 'square', \n         addCoef.col = 'black', \n         diag = FALSE,\n         tl.col='black', \n         type = 'full',\n         tl.cex = 1,\n         tl.srt = 0,\n         tl.offset = 1,\n         number.cex = 0.7,\n         cl.ratio = 0.1,\n         cl.pos = \"r\",\n         col=col2(20),\n         win.asp = .8)\ndev.off()\n\npng \n  2 \n\n\n###6.5 Yearly Earnings Persistence Objective: Test how well current ROA predicts future ROA, stratified by loss status.\nPlot: Line plot with confidence intervals from yearly regressions\nInterpretation: Firms without losses tend to show stronger earnings persistence. Loss firms show more variation and uncertainty in their earnings trajectory.\n\n#| label: fig-annual-regression-confidence-bands\n#| fig-cap: \"Annual Regressions of Future ROA on Current ROA with 95% Confidence Bands\"\n#| echo: false\n#| message: false\n#| warning: false\n\n\n# bonus example \n\nfigdata &lt;- regdata |&gt;\n  #nest the regressions by year and loss\n  nest_by(calyear,loss) |&gt; \n  # fit the regressions\n  mutate(\n    fit = list(lm(roa_lead_1 ~ roa, data = data))\n  ) |&gt; \n  # use the broom package to tidy the regressions\n  #option conf.int outputs the confidence intervals so we can plot them\n  summarise(broom::tidy(fit, conf.int = TRUE)) |&gt; \n  #I don't plan to plot the intercept so i will drop it from the data\n  filter(term !=\"(Intercept)\") \n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n`summarise()` has grouped output by 'calyear', 'loss'. You can override using\nthe `.groups` argument.\n\n#can also use this setup to do Fama-Macbeth regressions, etc. \n#can also use pmg package for Fama-Macbeth\n\n#now make a ggplot object from the data\nfig &lt;- figdata |&gt; \n  mutate(loss = factor(loss)) |&gt; \n  ggplot(aes(x=calyear,y=estimate))  +\n  geom_ribbon(aes(ymin = conf.low, ymax=conf.high, \n                  group = loss),\n                  fill = \"grey80\") + \n  geom_line(aes(color=loss)) +\n  geom_point(aes(color=loss)) +\n  theme_bw(base_family = \"serif\") \n\n#Look at it in R  \nfig\n\n\n\n\n\n\n\n#For Latex\nggsave(glue(\"{data_path}/output/coef_year.pdf\"), fig, width = 7, height = 6)\n\n#For Word\nggsave(glue(\"{data_path}/output/coef_year.png\"), fig, width = 7, height = 6)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "regression-table.html",
    "href": "regression-table.html",
    "title": "7  Regression Tables",
    "section": "",
    "text": "7.1 Basic Preview Table\nLet’s start by loading the necessary packages and libraries.\nThis section loads the necessary helper scripts into the environment. Make sure to adjust the data_path to your own working directory to ensure that the required scripts are correctly sourced.\nFor clean and simple outputs, we set this option for modelsummary to ensure that numeric values are displayed without additional formatting, like scientific notation or rounding, making the results easier to read.\noptions(modelsummary_format_numeric_latex = \"plain\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regression Tables</span>"
    ]
  },
  {
    "objectID": "regression-table.html#basic-preview-table",
    "href": "regression-table.html#basic-preview-table",
    "title": "7  Regression Tables",
    "section": "",
    "text": "7.1.1 Read in the data from the previous step\nWe now load the data for our analysis. Given that there are fewer firms in 1969s, we will start the dataset from year 1970 onward.\nThe sjlabelled::var_labels function is used to assign meaningful labels to the variables for better readability, especially when producing tables or graphs.\n\n\n7.1.2 Observations by Decade\nThe goal is to demonstrate how to export a basic manual table or data frame into a paper. Initially, I grouped the data by year, but it was too lengthy. Instead, I will manually group the data by decade for better clarity.\nHere, we create a new row that summarizes the total number of firms, loss firms, and the percentage of firms with losses across the entire dataset. This total row is then appended to the previously computed table.\n\n#add a total row\ntotalrow &lt;- regdata |&gt; \n  summarize(`Total Firms` = formattable::comma(n(), digits=0),\n            `Loss Firms` = formattable::comma(sum(loss),digits=0),\n            `Pct. Losses` = formattable::percent(sum(loss)/n(), digits=2)\n  )|&gt; \n  mutate(Year = \"Total\")\n\n#bind together the existing and total rows\ntable1 &lt;- bind_rows(table1, totalrow) \n\nThen we can take a quick look at the updated table.\n\ntable1\n\n# A tibble: 7 × 4\n  Year        `Total Firms` `Loss Firms` `Pct. Losses`\n  &lt;chr&gt;       &lt;formttbl&gt;    &lt;formttbl&gt;   &lt;formttbl&gt;   \n1 1970 - 1979 25,101        1,978        7.88%        \n2 1980 - 1989 29,125        5,315        18.25%       \n3 1990 - 1999 38,024        9,579        25.19%       \n4 2000 - 2009 37,100        12,822       34.56%       \n5 2010 - 2019 28,434        9,671        34.01%       \n6 2020 - 2022 5,514         2,516        45.63%       \n7 Total       163,298       41,881       25.65%       \n\n\nYou can use the KableExtra package and directly use it in your Latex document (e.g., Overleaf). Here’s how to export the table into a Latex-friendly format:\n\nlatex_code &lt;- kbl(table1,\n                  format = \"latex\",\n                  booktabs = TRUE,\n                  linesep = \"\")  # Generate LaTeX table\n\ncat(latex_code)\n\n\n\\begin{tabular}[t]{lrrr}\n\\toprule\nYear & Total Firms & Loss Firms & Pct. Losses\\\\\n\\midrule\n1970 - 1979 & 25,101 & 1,978 & 7.88\\%\\\\\n1980 - 1989 & 29,125 & 5,315 & 18.25\\%\\\\\n1990 - 1999 & 38,024 & 9,579 & 25.19\\%\\\\\n2000 - 2009 & 37,100 & 12,822 & 34.56\\%\\\\\n2010 - 2019 & 28,434 & 9,671 & 34.01\\%\\\\\n2020 - 2022 & 5,514 & 2,516 & 45.63\\%\\\\\nTotal & 163,298 & 41,881 & 25.65\\%\\\\\n\\bottomrule\n\\end{tabular}",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regression Tables</span>"
    ]
  },
  {
    "objectID": "regression-table.html#summary-statistics-table",
    "href": "regression-table.html#summary-statistics-table",
    "title": "7  Regression Tables",
    "section": "7.2 Summary Statistics Table",
    "text": "7.2 Summary Statistics Table\nIn empirical research, it is common to present descriptive statistics for key variables. These typically include the mean, median, standard deviation, minimum, and maximum values. Such statistics can be highly informative and sometimes provide researchers with unexpected insights. In this section, we will demonstrate how to generate a clean and reproducible summary statistics table.\n\n##Create formatting functions --------------------------------------------------\n\n#set number formats for descriptive table\nmy_fmt &lt;- function(x) formattable::comma(x, digits=3)\n\n\n#N function to handle special format for N with no decimals \nNN &lt;- function(x) {\n  out &lt;-  if (is.logical(x) && all(is.na(x))) {\n    length(x)\n    # number of non-missing observations\n  } else {\n    sum(!is.na(x))\n  }\n  out &lt;- formattable::comma(out, digits=0)\n  return(out)\n}\n\nHere, we define functions for formatting the numeric values in the summary table. The my_fmt function is used to format numbers with three decimal places, and NN is a helper function for counting the number of non-missing observations (i.e., valid data points).\n\n7.2.1 Preparing the Date for Descriptive Statistics\nNext, we select the variables that will be included in the summary statistics table and apply the variable labels to make the table more readable.\n\n#If you make a subset of the data \n#you can handle the variable labels with sjlabelled \ndescripdata &lt;- regdata |&gt;\n  select(\n  roa_lead_1,\n  roa,\n  loss,\n  rd,\n  at,\n  mve) |&gt; \n  label_to_colnames()\n\n\n\n7.2.2 Run the datasummary function\nNow, we are ready to run the datasummary to generate a summary statistics table for the selected variables. This function formats the variables and outputs them in a clear and structured way.\n\ndatasummary( All(descripdata) ~ (N = NN) + Mean * Arguments(fmt = my_fmt) + \n               SD * Arguments(fmt = my_fmt) + \n               Min * Arguments(fmt = my_fmt) + \n               P25 * Arguments(fmt = my_fmt) + \n               Median * Arguments(fmt = my_fmt) + \n               P75 * Arguments(fmt = my_fmt) + \n               Max * Arguments(fmt = my_fmt), \n             # use escape = F to pass the latex formatting along  \n             escape = F,\n             #output = 'latex',\n             data = descripdata) #|&gt; \n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                N\n                Mean\n                SD\n                Min\n                P25\n                Median\n                P75\n                Max\n              \n        \n        \n        \n                \n                  $ROA_{t+1}$\n                  163,298\n                  -0.002\n                  0.173\n                  -0.898\n                  -0.009\n                  0.040\n                  0.078\n                  0.237\n                \n                \n                  $ROA_t$\n                  163,298\n                  0.006\n                  0.159\n                  -0.803\n                  -0.003\n                  0.042\n                  0.079\n                  0.243\n                \n                \n                  $LOSS$\n                  163,298\n                  0.256\n                  0.437\n                  0.000\n                  0.000\n                  0.000\n                  1.000\n                  1.000\n                \n                \n                  $R\\&D$\n                  163,298\n                  0.040\n                  0.086\n                  0.000\n                  0.000\n                  0.000\n                  0.038\n                  0.511\n                \n                \n                  $TA$\n                  163,298\n                  1,449.837\n                  4,555.996\n                  11.021\n                  41.910\n                  142.534\n                  679.370\n                  33,637.256\n                \n                \n                  $SIZE$\n                  163,298\n                  1,568.688\n                  5,317.423\n                  2.127\n                  29.790\n                  125.510\n                  651.281\n                  40,596.033\n                \n        \n      \n    \n\n\n  #save_kable(glue(\"{data_path}/output/descrip-r.tex\"))\n\nBy commenting out the output = 'latex' line, we ensure the table is displayed in a readable format in the console. If you need the LaTeX code, simply uncomment it. Additionally, the last line can be uncommented to save the LaTeX table to a .tex file for use in your LaTeX document.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regression Tables</span>"
    ]
  },
  {
    "objectID": "regression-table.html#correlation-matrix-table",
    "href": "regression-table.html#correlation-matrix-table",
    "title": "7  Regression Tables",
    "section": "7.3 Correlation Matrix Table",
    "text": "7.3 Correlation Matrix Table\nNext, we examine how to generate a correlation matrix using datasummary. The matrix will display the Pearson correlation above the diagonal and the Spearman correlation below the diagonal. This provides a comprehensive view of the relationships between the variables in the dataset.\n\ndatasummary_correlation(descripdata, method = \"pearspear\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                $ROA_{t+1}$\n                $ROA_t$\n                $LOSS$\n                $R\\&D$\n                $TA$\n                $SIZE$\n              \n        \n        \n        \n                \n                  $ROA_{t+1}$\n                  1\n                  .77\n                  -.57\n                  -.51\n                  .10\n                  .12\n                \n                \n                  $ROA_t$\n                  .77\n                  1\n                  -.69\n                  -.57\n                  .09\n                  .12\n                \n                \n                  $LOSS$\n                  -.59\n                  -.76\n                  1\n                  .35\n                  -.11\n                  -.11\n                \n                \n                  $R\\&D$\n                  -.10\n                  -.11\n                  .20\n                  1\n                  -.07\n                  -.02\n                \n                \n                  $TA$\n                  .16\n                  .15\n                  -.20\n                  -.07\n                  1\n                  .85\n                \n                \n                  $SIZE$\n                  .25\n                  .27\n                  -.20\n                  .12\n                  .85\n                  1\n                \n        \n      \n    \n\n\n\n\ndatasummary_correlation(descripdata, \n                        method = \"pearspear\",\n                        output = \"latex\",\n                        escape = F) #|&gt; \n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                $ROA_{t+1}$\n                $ROA_t$\n                $LOSS$\n                $R\\&D$\n                $TA$\n                $SIZE$\n              \n        \n        \n        \n                \n                  $ROA_{t+1}$\n                  1\n                  .77\n                  -.57\n                  -.51\n                  .10\n                  .12\n                \n                \n                  $ROA_t$\n                  .77\n                  1\n                  -.69\n                  -.57\n                  .09\n                  .12\n                \n                \n                  $LOSS$\n                  -.59\n                  -.76\n                  1\n                  .35\n                  -.11\n                  -.11\n                \n                \n                  $R\\&D$\n                  -.10\n                  -.11\n                  .20\n                  1\n                  -.07\n                  -.02\n                \n                \n                  $TA$\n                  .16\n                  .15\n                  -.20\n                  -.07\n                  1\n                  .85\n                \n                \n                  $SIZE$\n                  .25\n                  .27\n                  -.20\n                  .12\n                  .85\n                  1\n                \n        \n      \n    \n\n\n  #save_kable(glue(\"{data_path}/output/corrtable-r.tex\"))\n\nThis will print the correlation matrix in LaTeX format, which you can easily copy and paste into your Overleaf document. Again, you can uncomment the save_kable() function to save the LaTeX table to a .tex file.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regression Tables</span>"
    ]
  },
  {
    "objectID": "regression-table.html#regression-table",
    "href": "regression-table.html#regression-table",
    "title": "7  Regression Tables",
    "section": "7.4 Regression Table",
    "text": "7.4 Regression Table\nNow, we turn to creating a regression table. We’ll use the feols function from the fixest package to estimate fixed effects models, both with and without controls, and with different fixed effects specifications. The modelsummary package will be used to combine the regression results.\n\n7.4.1 Customizing Coefficient Labels and Goodness of Fit Statistics\nCoefficient map The order of the coefficients will follow this map, also if you wish to leave out coefficients, simply don’t list them in the map there may be ways to experiment with doing this with less work/code, but this method gives a lot of control over the output. Note how this allows for labeling interaction terms as well.\n\ncm &lt;- c(\n  \"roa_lead_1\" = \"$ROA_{t+1}$\",\n  \"roa\" = \"$ROA_{t}$\",\n  \"loss\" = \"$LOSS$\",\n  \"roa:loss\" = \"$ROA_{t} \\\\times LOSS$\"\n)\n\nOptional custom formula to format the regression N observations in the output\n\nnobs_fmt &lt;- function(x) {\n  out &lt;- formattable::comma(x, digits=0)\n  out &lt;- paste0(\"\\\\multicolumn{1}{c}{\",out,\"}\")\n}\n\nOptional custom format for the mapping of what to display in the goodness of fit statistics below the regression output. See the documentation for modelsummary(gof_map) and the estimation commands you are using, there will be many different possible choices of what to output.\n\ngm &lt;- list(\n  list(\"raw\" = \"nobs\", \"clean\" = \"N\", \"fmt\" = nobs_fmt),\n  list(\"raw\" = \"r.squared\", \"clean\" = \"$R^2$\", \"fmt\" = 3),\n  list(\"raw\" = \"r2.within\", \"clean\" = \"$R^2$ Within\", \"fmt\" = 3)\n)\n\nThen let’s preview the output without adding extra rows.\n\npanel &lt;- modelsummary(models, \n                      #cluster standard errors by gvkey and calyear\n                      vcov = ~ gvkey + calyear,\n                      #t-stats in parenthesis under coefficients\n                      statistic = \"statistic\",\n                      #add significance stars\n                      stars = c('*' = .1, '**' = .05, '***' = .01) ,\n                      estimate=\"{estimate}{stars}\",\n                      #apply the coefficient map for coef labels\n                      coef_map = cm,\n                      gof_map = gm,\n                      #output = \"latex\", \n                      escape = F,\n                      booktabs = T,\n                      #add_rows = my_rows\n) \n\npanel\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                Base\n                No FE\n                Year FE\n                Two-Way FE\n                With Controls\n              \n        \n        \n        \n                \n                  $ROA_{t}$\n                  0.839***\n                  0.756***\n                  0.769***\n                  0.639***\n                  0.624***\n                \n                \n                  \n                  (62.731)\n                  (48.156)\n                  (48.622)\n                  (38.636)\n                  (35.600)\n                \n                \n                  $LOSS$\n                  \n                  -0.030***\n                  -0.028***\n                  -0.015***\n                  -0.017***\n                \n                \n                  \n                  \n                  (-7.949)\n                  (-7.755)\n                  (-7.561)\n                  (-8.118)\n                \n                \n                  $ROA_{t} \\times LOSS$\n                  \n                  0.032\n                  0.012\n                  -0.285***\n                  -0.293***\n                \n                \n                  \n                  \n                  (1.471)\n                  (0.536)\n                  (-13.307)\n                  (-12.621)\n                \n                \n                  N\n                  \\multicolumn{1}{c}{163,298}\n                  \\multicolumn{1}{c}{163,298}\n                  \\multicolumn{1}{c}{163,298}\n                  \\multicolumn{1}{c}{161,635}\n                  \\multicolumn{1}{c}{161,635}\n                \n                \n                  $R^2$\n                  0.594\n                  0.597\n                  0.603\n                  0.707\n                  0.707\n                \n                \n                  $R^2$ Within\n                  \n                  \n                  0.580\n                  0.184\n                  0.186\n                \n        \n      \n    \n\n\n\n\n\n7.4.2 Adding Fixed-Effect Rows to the Regression Table\nIn this LaTeX example, I will show how to manually add heading and FE rows.However, in the R code to output to Word, I have provided the code to use the built in ability of fixest to create the FE Rows. This defines the rows we wish to add.The terms should match what you used as the model/column names in the model list.\n\nmy_rows &lt;- tribble(~term,~\"Base\",~\"No FE\", ~\"Year FE\",~\"Two-Way FE\",~\"With Controls\",\n                  \"Year FE\",\"\\\\multicolumn{1}{c}{Excluded}\",\"\\\\multicolumn{1}{c}{Excluded}\",\"\\\\multicolumn{1}{c}{Included}\",\"\\\\multicolumn{1}{c}{Included}\",\"\\\\multicolumn{1}{c}{Included}\",\n                  \"Firm FE\",\"\\\\multicolumn{1}{c}{Excluded}\",\"\\\\multicolumn{1}{c}{Excluded}\",\"\\\\multicolumn{1}{c}{Excluded}\",\"\\\\multicolumn{1}{c}{Included}\",\"\\\\multicolumn{1}{c}{Included}\",\n                  \"Controls\",\"\\\\multicolumn{1}{c}{Excluded}\",\"\\\\multicolumn{1}{c}{Excluded}\",\"\\\\multicolumn{1}{c}{Excluded}\",\"\\\\multicolumn{1}{c}{Excluded}\",\"\\\\multicolumn{1}{c}{Included}\")\n#count the rows in the preview output to see where to insert these extra rows\nattr(my_rows,\"position\") &lt;- c(7,8,9)\n\nIn the above code, we define the fixed effect rows using tribble, which is a convenient way to manually create small data frames in R. We specify the presence (Included) or absence (Excluded) of fixed effects for each regression model. The position attribute determines where these rows will be inserted into the regression table.\nFinally, we generate the regression table with the FE rows.\n\npanel &lt;- modelsummary(models, \n                      #cluster standard errors by gvkey and calyear\n                      vcov = ~ gvkey + calyear,\n                      #t-stats in parenthesis under coefficients\n                      statistic = \"statistic\",\n                      #add significance stars\n                      stars = c('\\\\sym{*}' = .1, '\\\\sym{**}' = .05, '\\\\sym{***}' = .01),\n                      estimate=\"{estimate}{stars}\",\n                      #apply the coefficient map for coef labels\n                      coef_map = cm,\n                      gof_map = gm,\n                      #output = \"latex\", \n                      escape = F,\n                      booktabs = T,\n                      add_rows = my_rows,\n                      #if you want to decimal align the columns, use the number \n                      #of d equal to the number of models\n                      #if I comment out the below line, modelsummary would dp \n                      # \"lccccc\" on its own as the default.\n                      align = \"lddddd\") \npanel\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                Base\n                No FE\n                Year FE\n                Two-Way FE\n                With Controls\n              \n        \n        \n        \n                \n                  $ROA_{t}$\n                  0.839\\sym{***}\n                  0.756\\sym{***}\n                  0.769\\sym{***}\n                  0.639\\sym{***}\n                  0.624\\sym{***}\n                \n                \n                  \n                  (62.731)\n                  (48.156)\n                  (48.622)\n                  (38.636)\n                  (35.600)\n                \n                \n                  $LOSS$\n                  \n                  -0.030\\sym{***}\n                  -0.028\\sym{***}\n                  -0.015\\sym{***}\n                  -0.017\\sym{***}\n                \n                \n                  \n                  \n                  (-7.949)\n                  (-7.755)\n                  (-7.561)\n                  (-8.118)\n                \n                \n                  $ROA_{t} \\times LOSS$\n                  \n                  0.032\n                  0.012\n                  -0.285\\sym{***}\n                  -0.293\\sym{***}\n                \n                \n                  \n                  \n                  (1.471)\n                  (0.536)\n                  (-13.307)\n                  (-12.621)\n                \n                \n                  Year FE\n                  \\multicolumn{1}{c}{Excluded}\n                  \\multicolumn{1}{c}{Excluded}\n                  \\multicolumn{1}{c}{Included}\n                  \\multicolumn{1}{c}{Included}\n                  \\multicolumn{1}{c}{Included}\n                \n                \n                  Firm FE\n                  \\multicolumn{1}{c}{Excluded}\n                  \\multicolumn{1}{c}{Excluded}\n                  \\multicolumn{1}{c}{Excluded}\n                  \\multicolumn{1}{c}{Included}\n                  \\multicolumn{1}{c}{Included}\n                \n                \n                  Controls\n                  \\multicolumn{1}{c}{Excluded}\n                  \\multicolumn{1}{c}{Excluded}\n                  \\multicolumn{1}{c}{Excluded}\n                  \\multicolumn{1}{c}{Excluded}\n                  \\multicolumn{1}{c}{Included}\n                \n                \n                  N\n                  \\multicolumn{1}{c}{163,298}\n                  \\multicolumn{1}{c}{163,298}\n                  \\multicolumn{1}{c}{163,298}\n                  \\multicolumn{1}{c}{161,635}\n                  \\multicolumn{1}{c}{161,635}\n                \n                \n                  $R^2$\n                  0.594\n                  0.597\n                  0.603\n                  0.707\n                  0.707\n                \n                \n                  $R^2$ Within\n                  \n                  \n                  0.580\n                  0.184\n                  0.186",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regression Tables</span>"
    ]
  },
  {
    "objectID": "regression-table.html#wrapping-up",
    "href": "regression-table.html#wrapping-up",
    "title": "7  Regression Tables",
    "section": "7.5 Wrapping Up",
    "text": "7.5 Wrapping Up\nIn this chapter, we explored how to use the modelsummary and datasummary packages to automate the creation of regression tables, summary statistics tables, and other common statistical outputs. We also covered customizing the tables to match specific formatting and adding fixed effects rows to regression models.\nBy automating the process, we ensure that tables are reproducible and consistent across different analysis runs, which is crucial for maintaining research transparency and reproducibility.\nNow, you are equipped with the knowledge to efficiently create and customize regression tables in R for your own data analysis projects.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regression Tables</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "8  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]