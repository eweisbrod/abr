[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applied Business Research",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "obtain-data.html",
    "href": "obtain-data.html",
    "title": "2  Obtaining and Merging Data",
    "section": "",
    "text": "This is my first time working on a Quarto book. So, this first post will be very rough for now. I will try to provide a few different examples of ways to obtain and merge data in R, and a few tips of things to keep in mind.\nWe already know how to obtain data from WRDS. Let’s use this to obtain some returns for the S&P 500. We could use the formal index data, but let’s take a shortcut and just use the popular SPY ETF that tracks the S&P 500. To do this, we need to find the CRSP identifier (PERMNO) for the ticker “SPY.” We can look in the WRDS stocknames file for this, and then use the SPY PERMNO to pull data from the CRSP monthly stock file.\n\n# Load Libraries [i.e., packages]\nlibrary(dbplyr)\nlibrary(RPostgres)\nlibrary(DBI)\nlibrary(glue)\nlibrary(arrow)\nlibrary(haven)\nlibrary(tictoc) #very optional timer, mostly as a teaching example\nlibrary(tidyverse) # I like to load tidyverse last to avoid package conflicts\n\n#I have done this in a separate chunk with the options\n# results: FALSE \n# message: FALSE\n#because I don't need to see the messages from loading the packages. \n\n\n# Log in to WRDS -------------------------------------------------------------------\n\n#before running this block, I used these commands to securely store my WRDS username and password:\n# keyring::key_set(\"WRDS_user\")\n# keyring::key_set(\"WRDS_pw\")\n\nif(exists(\"wrds\")){\n  dbDisconnect(wrds)  # because otherwise WRDS might time out\n}\n\nwrds &lt;- dbConnect(Postgres(),\n                  host='wrds-pgdata.wharton.upenn.edu',\n                  port=9737,\n                  user=keyring::key_get(\"WRDS_user\"),\n                  password=keyring::key_get(\"WRDS_pw\"),\n                  sslmode='require',\n                  dbname='wrds')\n\n\n# Create WRDS Table References -------------------------------------------------\ncrsp.msf &lt;- tbl(wrds,in_schema(\"crsp\",\"msf\"))\nstocknames &lt;- tbl(wrds,in_schema(\"crsp\",\"stocknames\"))\n\n#I am collecting this data locally to play with duplicates\nspy_permnos &lt;- stocknames |&gt; filter(ticker == \"SPY\") |&gt; collect() \n\nNotice that there are six observations in the stocknames table that all share the same ticker “SPY.” I am going to use this as a toy example to play with duplicates. My goal is for this data to be unique at the level of ticker-permno links. First, I can check whether this is true.\n\n#check whether there are duplicates \n#this simple logic is useful in general\n#group by the level I want to make unique,\n#count within each group\n#sort by descending count so that if there are duplicates\n#they will show up at the top. \nspy_permnos |&gt; \n  group_by(ticker,permno) |&gt; \n  count() |&gt; \n  arrange(-n)\n\n# A tibble: 3 × 3\n# Groups:   ticker, permno [3]\n  ticker permno     n\n  &lt;chr&gt;   &lt;int&gt; &lt;int&gt;\n1 SPY     84398     3\n2 SPY     33910     1\n3 SPY     60716     1\n\n\nThere are multiple permnos connected to the SPY ticker and some duplicate entries for permno 84398 so I better just look at the data. Also this tells me that there are only a few rows so it doesn’t hurt to just print the data.\n\n#| #note that we can use the kable commmand to embed a simple table in the quarto document\nknitr::kable(spy_permnos)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npermno\nnamedt\nnameenddt\nshrcd\nexchcd\nsiccd\nncusip\nticker\ncomnam\nshrcls\npermco\nhexcd\ncusip\nst_date\nend_date\nnamedum\n\n\n\n\n33910\n1962-07-02\n1966-05-24\n10\n2\n2893\nNA\nSPY\nSPEEDRY CHEMICAL PRODS INC\nA\n2751\n3\n55914210\n1962-07-02\n1979-01-22\n2\n\n\n60716\n1978-10-03\n1987-07-01\n10\n1\n3811\n84756710\nSPY\nSPECTRA PHYSICS INC\nNA\n4215\n1\n84756710\n1972-12-14\n1987-07-01\n2\n\n\n84398\n1993-01-29\n2009-02-23\n73\n2\n6726\n78462F10\nSPY\nSPDR TRUST\nNA\n46699\n4\n78462F10\n1993-01-29\n2024-12-31\n2\n\n\n84398\n2009-02-24\n2010-01-26\n73\n4\n6726\n78462F10\nSPY\nSPDR TRUST\nNA\n46699\n4\n78462F10\n1993-01-29\n2024-12-31\n2\n\n\n84398\n2010-01-27\n2024-12-31\n73\n4\n6726\n78462F10\nSPY\nSPDR S & P 500 E T F TRUST\nNA\n46699\n4\n78462F10\n1993-01-29\n2024-12-31\n2\n\n\n\n\n\nLooking at the data, the company name for permno 84398 matches the SPDR S&P 500 ETF I am looking for. It looks like the duplicate entries might have to do with a change in the listing exchange for the ETF (exchcd) and then a slight name change in 2010 to make the name of the trust more descriptive. Let’s keep using this toy example to demonstrate some other functions for dealing with duplicates:\n\n#if I want to just collapse the duplicates, I can use \"distinct\" across the groups that I care about\n\nspy_permnos |&gt; \n  select(ticker,permno) |&gt; \n  distinct()\n\n# A tibble: 3 × 2\n  ticker permno\n  &lt;chr&gt;   &lt;int&gt;\n1 SPY     33910\n2 SPY     60716\n3 SPY     84398\n\n\nNow there are only three observations,which is what I asked for, but sometimes it might matter which of the duplicate observations I keep. For example, perhaps what I should do is keep the most recent observation from the spy_permno dataset, in terms of nameenddt.\n\n#select the max data within each group as more advanced way to keep one obs per \n#group\nspy_permnos |&gt; \n  group_by(ticker,permno) |&gt;\n  filter(nameenddt==max(nameenddt))\n\n# A tibble: 3 × 16\n# Groups:   ticker, permno [3]\n  permno namedt     nameenddt  shrcd exchcd siccd ncusip   ticker comnam  shrcls\n   &lt;int&gt; &lt;date&gt;     &lt;date&gt;     &lt;int&gt;  &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; \n1  33910 1962-07-02 1966-05-24    10      2  2893 &lt;NA&gt;     SPY    SPEEDR… A     \n2  60716 1978-10-03 1987-07-01    10      1  3811 84756710 SPY    SPECTR… &lt;NA&gt;  \n3  84398 2010-01-27 2024-12-31    73      4  6726 78462F10 SPY    SPDR S… &lt;NA&gt;  \n# ℹ 6 more variables: permco &lt;int&gt;, hexcd &lt;int&gt;, cusip &lt;chr&gt;, st_date &lt;date&gt;,\n#   end_date &lt;date&gt;, namedum &lt;dbl&gt;\n\n#ultimately we can assign the permno of the current observation, which we already know from manually checking is the correct permno, 84398\n\nspy_permno &lt;- spy_permnos |&gt; \n  group_by(ticker,permno) |&gt;\n  filter(nameenddt==max(nameenddt)) |&gt; \n  ungroup() |&gt; \n  filter(nameenddt==max(nameenddt)) |&gt; \n  select(permno) |&gt; \n  as.numeric()\n\nspy_permno\n\n[1] 84398\n\n\nNow we can use the SPY permno to pull monthly returns for SPY:\n\n# Pull CRSP MSI Data -----------------------------------------------------------\n\n#Data seems to begin in feb 1993, lets start in 1995 as a nice round number\n#notice that this implicitly feeds the permno I calculated locally back up to WRDS in my crsp query. \nmkt_index &lt;- crsp.msf |&gt; \n  filter(date &gt;= \"1995-01-01\",\n         permno == spy_permno) |&gt; \n  select(date,ret,prc) |&gt; \n  collect() |&gt; \n  mutate(month = month(date),\n         year = year(date))\n\nThen I can plot them, note that if you look at the source code for this page, I do this in a chunk with echo=false so that I only see the output and not the code. This would be useful for creating an actual paper rather than coding examples:\n\n\n\n\n\n\n\n\n\nThis plot would look nice with recessions shaded. We can get recession dates from FRED. FRED data can be accessed from an API, there is a custom package to work with FRED data in R called fredr. First you need to obtain a FRED API key by signing up here: https://fred.stlouisfed.org/docs/api/api_key.html\n\n#load the fredr package\nlibrary(fredr)\n\n#set my API key which is saved in keyring\nfredr_set_key(keyring::key_get(\"fred_api_key\"))\n\n#collect the data from the series USRECD\n# https://fred.stlouisfed.org/series/USRECD\n\nfred_data&lt;-fredr(series_id = \"USRECD\",\n                 observation_start = as.Date(\"1995-01-01\"),\n                 observation_end = as.Date(\"2024-12-31\"),\n                 frequency = \"m\") |&gt; \n  #I am going to add month and year variables because I think this is \n  #easier for linking\n  mutate(month = month(date),\n         year = year(date))\n\n# show the first few rows which has a value of 0 or 1 where 1 is recession\nfred_data |&gt; head() |&gt; knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\ndate\nseries_id\nvalue\nrealtime_start\nrealtime_end\nmonth\nyear\n\n\n\n\n1995-01-01\nUSRECD\n0\n2025-03-07\n2025-03-07\n1\n1995\n\n\n1995-02-01\nUSRECD\n0\n2025-03-07\n2025-03-07\n2\n1995\n\n\n1995-03-01\nUSRECD\n0\n2025-03-07\n2025-03-07\n3\n1995\n\n\n1995-04-01\nUSRECD\n0\n2025-03-07\n2025-03-07\n4\n1995\n\n\n1995-05-01\nUSRECD\n0\n2025-03-07\n2025-03-07\n5\n1995\n\n\n1995-06-01\nUSRECD\n0\n2025-03-07\n2025-03-07\n6\n1995\n\n\n\n\n\nNow we need to merge the SPY data with the recession data.\n\nmerged_data &lt;- mkt_index |&gt;\n  #I am going to select only the columns I need from   #the FRED data\n  inner_join(fred_data |&gt; \n               select(month,year,recession=value),\n             by=join_by(month,year))\n\n# check to make sure it is still unique by month \nmerged_data |&gt; \n  group_by(month,year) |&gt; \n  count() |&gt; \n  arrange(-n)\n\n# A tibble: 360 × 3\n# Groups:   month, year [360]\n   month  year     n\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1  1995     1\n 2     1  1996     1\n 3     1  1997     1\n 4     1  1998     1\n 5     1  1999     1\n 6     1  2000     1\n 7     1  2001     1\n 8     1  2002     1\n 9     1  2003     1\n10     1  2004     1\n# ℹ 350 more rows\n\n\nNow we can make the plot with shades for recession months\n\n#turns out the merged data was not the preferred way to do this kind of plot\n\n\n\n\n#here is some code I found online to reshape the recession data and add it to the plot \n\n#rename/assign fred data to recession because \n#that was the name in the example I found \nrecession&lt;-fred_data\n\n#load a package they used\nlibrary(ecm)\n\n#reshape the recession data for the way \n#geom_rect likes the data shaped\nrecession$diff&lt;-recession$value-lagpad(recession$value,k=1)\n  recession&lt;-recession[!is.na(recession$diff),]\n  recession.start&lt;-recession[recession$diff==1,]$date\n  recession.end&lt;-recession[recession$diff==(-1),]$date\n  \n  if(length(recession.start)&gt;length(recession.end))\n  {recession.end&lt;-c(recession.end,Sys.Date())}\n  if(length(recession.end)&gt;length(recession.start))\n  {recession.start&lt;-c(min(recession$date),recession.start)}\n  \n  recs&lt;-as.data.frame(cbind(recession.start,recession.end))\n  recs$recession.start&lt;-as.Date(as.numeric(recs$recession.start),origin=as.Date(\"1970-01-01\"))\n  recs$recession.end&lt;-as.Date(recs$recession.end,origin=as.Date(\"1970-01-01\"))\n\n#look at the reshaped data\nrecs \n\n  recession.start recession.end\n1      2001-04-01    2001-12-01\n2      2008-01-01    2009-07-01\n3      2020-03-01    2020-05-01\n\n#plot the new plot with recession bars\nmerged_data |&gt; \n  ggplot(aes(x=date,y=abs(prc))) + \n  geom_line() +\n  scale_x_date(name = \"Date\",\n               date_breaks= \"5 years\",\n               date_labels = \"%Y\") +\n  scale_y_continuous(name = \"SPY Closing Price\") +\n  geom_rect(data=recs, inherit.aes=F, \n                         aes(xmin=recession.start, xmax=recession.end, ymin=-Inf, ymax=+Inf), \n                fill=\"darkgrey\", alpha=0.5)+\n  theme_bw()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Obtaining and Merging Data</span>"
    ]
  },
  {
    "objectID": "regression-table.html",
    "href": "regression-table.html",
    "title": "3  Regression Tables",
    "section": "",
    "text": "Test of embedding a regression in Quarto.\n\n\n\n\nTable 3.1\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                Base\n                No FE\n                Year FE\n                Two-Way FE\n                With Controls\n              \n        \n        \n        \n                \n                  $ROA_{t}$\n                  0.839***\n                  0.756***\n                  0.769***\n                  0.639***\n                  0.624***\n                \n                \n                  \n                  (62.732)\n                  (48.155)\n                  (48.621)\n                  (38.634)\n                  (35.596)\n                \n                \n                  $LOSS$\n                  \n                  -0.030***\n                  -0.028***\n                  -0.015***\n                  -0.017***\n                \n                \n                  \n                  \n                  (-7.949)\n                  (-7.755)\n                  (-7.556)\n                  (-8.111)\n                \n                \n                  $ROA_{t} \\times LOSS$\n                  \n                  0.032\n                  0.012\n                  -0.285***\n                  -0.294***\n                \n                \n                  \n                  \n                  (1.470)\n                  (0.535)\n                  (-13.307)\n                  (-12.620)\n                \n                \n                  Year FE\n                  \n                  \n                  X\n                  X\n                  X\n                \n                \n                  Firm FE\n                  \n                  \n                  \n                  X\n                  X\n                \n                \n                  Controls\n                  \n                  \n                  \n                  \n                  X\n                \n                \n                  N\n                  163,298\n                  163,298\n                  163,298\n                  161,635\n                  161,635\n                \n                \n                  $R^2$\n                  0.594\n                  0.597\n                  0.603\n                  0.707\n                  0.707\n                \n                \n                  $R^2$ Within\n                  \n                  \n                  0.580\n                  0.184\n                  0.186",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Regression Tables</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]