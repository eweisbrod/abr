# Project Setup

This chapter will have links and explainers on how to get your quarto and other GitHub projects going...

The top finance/accounting/aio journals are about to be flooded with highly reproducible KU research.

## Git vs. GitHub

Git is the underlying code that helps manage version control of your projects. You can find more information about the details of Git [here](https://github.com/git-guides#what-is-git). Information about how to install git on your machine can be found [here](https://github.com/git-guides/install-git).

GitHub is a web-based user interface that makes Git easier to work with by allowing "point-and-click" version control rather than typing git commands. You will want to set up a [GitHub account](https://github.com/). The rest of this chapter will reference the use of GitHub, although everything discussed can also be accomplished through the Git language.

## Language of GitHub

It is important to remember that GitHub acts as a version control interface for your research projects. So, while we will discuss the verbiage of GitHub, at its core, all that it is doing is keeping track of the changes that you make to your code. It may be helpful to translate the Git language into words you regularly associate with project management.

**Repository** - A repository is where all the code for a specific project lives. You can think of it like the project folder where your code is stored. The benefit of a repository is that it is stored online, allowing you to easily access it from any machine. You will most likely want to make your repository private, so that only you and people you identify as co-authors can access your code.

**Fork** - "Forking" a repository is equivalent to making a copy of someone else's repository. If a repository is made public, then anyone can fork the repository to have their own copy. This is unlikely to be something that will commonly occur in your own research, as we will discuss next. You can think of forking a repository as the same as copying someone else's code folder and pasting it onto your computer.

**Clone** - "Cloning" is where the power of GitHub really begins. Cloning a repository is the same as giving your local machine (e.g., computer) access to the code in the repository. Think of it like installing Dropbox on another computer. Now you have access to all the files stored on Dropbox. Cloning a repository is the exact same thing for code. Once you have cloned the repository, you can now work on the code from that machine. The power comes in by being able to clone the repository on multiple computers, and your coauthors doing the same, allowing you all to work on the same set of code. To clone a repository, you will need the cloning URL. To get this, go to the repository on GitHub, click the green "Code" button, and click on the copy button (two intersecting squares) next to the HTTPS URL.

**Staging** - Once you save the code you are working on to your local computer, a new row will appear under the "Git" tab in the top right panel of R Studio. In order to officially "save" your changes to your online GitHub repository, you need to first stage the changes. "Staging" is the same thing as "selecting" which changes you want to officially send to GitHub, which will be discussed next.

**Commit** - Once you have staged your changes, you are ready to begin the process of uploading them to GitHub. The first thing you need to do is to "commit" the changes. As the name implies, a "commit" means you are committed ;) to making the changes to the code. To do this, click the "Commit" button in the top right panel of R Studio. You will need to type a short message which summarizes the changes that you have made, which will be visible on GitHub so you can easily see the evolution of your code over time. Once you have typed your message, click "Commit".

**Pull** - "Pulling" is effectively the same as downloading the most recent version of your project's code onto your local computer. When you click "Pull" in the top right panel of R Studio, you are "pulling" the code from GitHub onto your local machine. **You should always pull before you push!**

**Push** - "Pushing" is the final step of saving your code through GitHub. After you have committed your changes and pulled the most recent version of the project to your machine, you can send your changes to GitHub by clicking "Push" in the top right panel of R Studio. Doing this officially sends the changes that you have made up to GitHub, effectively pushing the code from your local device onto GitHub. This can also be thought of as if you made changes to a file on your local computer and then saved that file onto Dropbox. The power of GitHub is that you can see both the old version and new version, and restore your code to older versions if you decide you don't like your changes.

## Power of Projects

When you first begin working with R, one of the first things that you learn are the benefits of storing/saving code in R scripts. In theory, we could always write all of our code in the terminal, and just rewrite it every time we wanted to run a command (gross!). Using R scripts allows us to save our code, which can be run the exact same way every time. In a nutshell, what the R script is really doing is making our code more reproducible, as we can be sure that we are always running the same commands.

The next evolution of your R journey probably went something like this... You realized that trying to code up an entire research project in one R script was burdensome. There are thousands of lines of code, some of which you do not want to run every time. So, you break up your project into multiple R scripts, with each one serving a different function (e.g., data download, data cleaning, analysis, figures, etc.). While this likely initially occurred just by saving the different scripts in the Dropbox folder where you stored your project files (code, data, paper drafts, etc.), we will next discuss how we can integrate GitHub to help make working on a research project easier.

**Projects** in R can be thought of as self-contained folders, where all your code and associated documents can live. The power of these projects is that they can be integrated with GitHub, making your work more reproducible by keeping all your code for a project in one place along with the version history.[^project-setup-1] To start a new project, you will first create a repository on GitHub with this project's name. You then go into R Studio and click "File -\> New Project". From there, you will click on "Version Control -\> Git". This brings you to a screen which will allow you to clone (see above if this is unfamiliar) your GitHub repository to your local machine. You will copy and paste the URL from the repository into the "Repository URL" text box. The "Project directory name:" box will populate with a location on your local computer. This is where the project and subsequent R scripts will live. How you manage these comes down to personal preference, but a common way to store GitHub projects locally is to create a "git" folder on your computer's C-drive and then store each project in the git folder. Once you have set the project directory, you can select "Create Project" to create the local version of the repository on your computer.

[^project-setup-1]: Projects and repositories are linked together. A project lives in R and is an R object, while a repository lives on GitHub. When you read "repository" think "project" or vice versa, however you prefer.

The key thing to notice (and one of the many powers of working within projects) is located near the top right corner of R Studio. You will now see a blue box with the letter "R" inside of it, which is the image of an R project. Next to this, you will see the name of the project you just created, indicating that you are working "inside" this project. When you look at the "Files" in the bottom right panel, you will see that the directory has been changed to the location of your R project. This allows you to see all the scripts associated with this project, and quickly change between scripts. Importantly, any pushes that you make to GitHub will be pushed to that specific project.

One of the nice features of working in projects is the ability to quickly access your project code and switch between projects. For example, if you were conducting a research project using just R scripts, you would need to save them somewhere (e.g., Dropbox) and navigate to that folder to open/access them. When using an R project, rather than navigating to the folder on your computer that contains your code, you can just open R Studio and click on the R project button in the top right corner (blue cube with "R" inside). This will open up a drop down menu of all the projects you have on your computer, allowing you to open the one you want. When you close the project, whatever R scripts that you have open at the time you close will automatically open again the next time you open the project.

## Reproducible Workflow

All of the things we have discussed up to this point have been about making our code and research projects more reproducible and easier to understand. Beyond these tools, it is important to remember that a truly reproducible research project means that someone can take your project and with limited/no prior knowledge about what you were doing, replicate your findings and understand your code. To make this possible, it is important to try and make your code as clear and concise as possible, including plenty of documentation and comments in the code explaining what is happening. One of the best ways that I have found to keep my workflow easy to track is through developing a consistent naming convention between R scripts and data files.

When creating my R scripts, I always begin the script name with a number, beginning with "00". This is then followed by "-short-description.R" where the "short-description" is a short description of what the code is doing. The scripts are numbered based on when in the sequence they should be run. So, you would run the "00" scripts first, then "01", "02", and so on. Importantly, any data that I save from a script is named beginning with that script's numeric identifier. For example, if I save a data set called "new_data.parquet" from an R script titled "02-create-new-data.R", then I would save the parquet file with the name "02_new_data.parquet" in my Dropbox data folder. Doing this helps along two dimensions. First, it makes your data folder much more organized, with the data ordered in the chronological order that it was generated by your code. Second (and most importantly) it makes it immediately obvious which script generated the data set. That way, if someone has questions about a particular data set, you can immediately know what R script generated the data.

Below is an example project setup with the naming convention. The first level of bullet points are the R scripts (which would be located in the git folder) and the second level are the data sets (which would be saved on Dropbox).

-   00-Global-Parameters.R
-   01-Download-WRDS-Data.R
    -   01_compustat_data_raw.parquet
-   02-Create-Master-Data.R
    -   02_master_data.parquet
-   03-Main-Analyses.R
    -   03.01_table_1.tex
    -   03.02_table_2.tex
-   04-Figures.R
    -   04.01_figure_1.jpeg
    -   04.02_figure_2.jpeg
